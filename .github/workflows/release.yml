name: Release

on:
  push:
    branches:
      - master

defaults:
  run:
    shell: bash

env:
  IS_COOL: true

jobs:
  build:
    name: Create a new release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Build parser standalone JS
        working-directory: ./parser
        run: deno task bundle

      - name: Build parser binaries
        working-directory: ./parser
        run: deno task release:all

      - name: Copy files to release
        run: |
          mkdir -p release
          cp -r parser/build/* release/

      - name: Run binary tests
        run: bash tests/test_binary.sh

      - name: Build docs with Deno
        working-directory: ./docs
        run: deno task build

      - name: Zip dist folder
        working-directory: ./docs/dist
        run: zip -r ../../release/docs.zip *

      - name: Clone repository
        uses: actions/checkout@v2
        with:
          ref: "gh-pages"
          path: "./gh-pages"

      - name: Copy build content
        run: |
          cp -r ./docs/dist/* ./gh-pages
          cp /tmp/parsed.json ./gh-pages

      - name: Commit changes
        working-directory: ./gh-pages
        env:
          COMMIT_MESSAGE: Update pages with latest frontend
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add -A
          git diff --staged --quiet || git commit -m "$COMMIT_MESSAGE"
          git push origin gh-pages

      - name: Create Release
        uses: actions/github-script@v2
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            console.log('environment', process.versions);

            const fs = require('fs').promises;

            const { repo: { owner, repo }, sha } = context;
            console.log({ owner, repo, sha });

            const tag = "pre-" + sha;

            // Read and process CHANGELOG.md
            let releaseName = tag;
            let releaseContent = 'No release notes available.';

            try {
              const changelogContent = await fs.readFile('CHANGELOG.md', 'utf-8');
              const changelogBlocks = changelogContent.split('\n## ');

              // Get the latest block (assuming it's the first one after splitting)
              const latestBlock = changelogBlocks[changelogBlocks.length - 1];

              // Split the latest block into title and content
              const [latestTitle, ...latestContent] = latestBlock.split('\n');

              // Construct release name and body
              releaseName = latestTitle.trim() || tag;
              releaseContent = latestContent.join('\n').trim() || 'No release notes available.';
            } catch (error) {
              console.error('Error reading or processing changelog:', error);
            }

            const release = await github.repos.createRelease({
              owner, repo,
              tag_name: tag,
              name: releaseName,
              draft: false,
              target_commitish: sha,
              body: releaseContent,
              prerelease: true,
              make_latest: "true"
            });

            console.log('created release', { release });

            const releaseFiles = await fs.readdir('./release');
            for (let file of releaseFiles) {
              // do whatever filtering you want here, I'm just uploading all the files
              console.log('uploading', file);

              await github.repos.uploadReleaseAsset({
                owner, repo,
                release_id: release.data.id,
                name: file,
                data: await fs.readFile(`./release/${file}`)
              });            
            }

      # - name: Create Release
      #   id: create_release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # provided by Actions, no need to create
      #   with:
      #     tag_name: ${{ github.ref }}
      #     release_name: Release ${{ github.ref }}
      #     body: Release of version ${{ github.ref }}. # TODO: generate from CHANGELOG.md file ?
      #     draft: false
      #     prerelease: false

      # - name: Upload Release Asset
      #   id: upload-release-asset
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }} #  more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
      #     asset_path: ./release
      #     asset_name: parser*
      #     asset_content_type: application/zip
      #     asset_content_type: application/octet-stream
