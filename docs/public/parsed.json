{
  "category_types": ["classes", "enums", "structs", "panels"],
  "structure": {
    "globals": {
      "name": "Globals",
      "pageType": "function",
      "subcategories": {
        "Print": {
          "name": "Print",
          "description": "Prints all of the arguments to the console.",
          "parameters": [
            {
              "type": "vararg",
              "name": "args",
              "description": "All of the objects you want to print."
            }
          ],
          "realm": "shared",
          "item": "function"
        }
      },
      "item": "category"
    },
    "classes": {
      "name": "Classes",
      "pageType": "function",
      "subcategories": {
        "Player": {
          "name": "Player",
          "pageType": "function",
          "subcategories": {
            "PlayerMeta:IsSuiteLoaded": {
              "name": "PlayerMeta:IsSuiteLoaded",
              "description": "This will return 'true' if the player has loaded, false otherwise.\nNote: players are loaded after they loaded all the modules/plugins",
              "returns": [
                {
                  "type": "bool",
                  "description": "The load state of the player."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "PlayerMeta:Mns": {
              "name": "PlayerMeta:Mns",
              "description": "This will get the 'mns' player object, it's just a getter but you can still access the table directly",
              "returns": [
                {
                  "type": "table",
                  "description": "The player mns object (or nil if not loaded)."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "PlayerMeta:WhenSuiteLoaded": {
              "name": "PlayerMeta:WhenSuiteLoaded",
              "description": "Add something to be executed once the player has finished loading MonoSuite.",
              "parameters": [
                {
                  "type": "function",
                  "name": "fCallback",
                  "description": "The callback function (will get you the player back as the first argument)."
                }
              ],
              "returns": [
                {
                  "type": "bool",
                  "description": "Whether the callback has been executed right ahead (player already loaded)."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "PlayerMeta:MnsID": {
              "name": "PlayerMeta:MnsID",
              "returns": [
                { "type": "string", "description": "Player's MonoSuite ID." }
              ],
              "realm": "shared",
              "item": "function"
            },
            "PlayerMeta:MonoSuiteID": {
              "name": "PlayerMeta:MonoSuiteID",
              "returns": [
                { "type": "string", "description": "Player's MonoSuite ID." }
              ],
              "realm": "shared",
              "item": "function"
            },
            "PlayerMeta:ToMnsUser": {
              "name": "PlayerMeta:ToMnsUser",
              "description": "This will convert the Player to a MnsUser.",
              "returns": [
                { "type": "MnsUser", "description": "The MonoSuite User." }
              ],
              "realm": "shared",
              "item": "function"
            },
            "PlayerMeta:NotifyPhrase": {
              "name": "PlayerMeta:NotifyPhrase",
              "description": "This will add a phrased chat notification to the player.\n\nCalling it clientside will only ever show up clientside regardless of the Player.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sPhraseIdentifier",
                  "description": "The phrase that will be displayed on the client."
                },
                {
                  "type": "table|nil",
                  "name": "tData",
                  "description": "(Optional) The table with the data for the phrase."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "PlayerMeta:GetSuitePermissions": {
              "name": "PlayerMeta:GetSuitePermissions",
              "description": "This will return all permissions of the given player.",
              "returns": [
                {
                  "type": "table",
                  "description": "A non sequential table with permissions inside."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "PlayerMeta:HasSuitePermission": {
              "name": "PlayerMeta:HasSuitePermission",
              "description": "This will check if the given player has the given permission id(s).",
              "parameters": [
                {
                  "type": "string",
                  "name": "sPermission(s)",
                  "description": "This is the permission id being checked."
                }
              ],
              "returns": [
                {
                  "type": "bool",
                  "description": "Whether the player has the permission(s) or not."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "PlayerMeta:GetHighestSuiteRole": {
              "name": "PlayerMeta:GetHighestSuiteRole",
              "description": "Returns the highest role of the player.",
              "returns": [
                {
                  "type": "SuiteRole",
                  "description": "The highest player's role (defined by immunity)."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "PlayerMeta:GetSuiteColor": {
              "name": "PlayerMeta:GetSuiteColor",
              "description": "Returns the player color based on its highest role.",
              "returns": [
                { "type": "Color|nil", "description": "The MnsUser's color." }
              ],
              "realm": "shared",
              "item": "function"
            },
            "PlayerMeta:GetSuiteRoleIDs": {
              "name": "PlayerMeta:GetSuiteRoleIDs",
              "description": "Returns the current roles of the player.",
              "returns": [
                {
                  "type": "table",
                  "description": "Sequential table of role ids the player has."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "PlayerMeta:GetSuiteRoles": {
              "name": "PlayerMeta:GetSuiteRoles",
              "description": "Returns the current roles of the player.",
              "returns": [
                {
                  "type": "table",
                  "description": "Sequential table of roles the player has."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "PlayerMeta:HasSuiteRoleByID": {
              "name": "PlayerMeta:HasSuiteRoleByID",
              "description": "Checks if the player has the specified role.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sID",
                  "description": "The role to check."
                }
              ],
              "returns": [
                {
                  "type": "bool",
                  "description": "Returns true if the player has the role, false otherwise"
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "PlayerMeta:HasSuiteRole": {
              "name": "PlayerMeta:HasSuiteRole",
              "description": "Check if the player has the specified role.",
              "parameters": [
                {
                  "type": "any",
                  "name": "aRole",
                  "description": "The role to check, can be a role object or role alias."
                }
              ],
              "returns": [
                {
                  "type": "bool",
                  "description": "Returns true if the player has the role, false otherwise"
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "PlayerMeta:_AddSuiteRole": {
              "name": "PlayerMeta:_AddSuiteRole",
              "description": "This will add the given role to the player. This is called internally,\nthis should not be called manually.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sID",
                  "description": "The role ID to add to the player."
                }
              ],
              "realm": "shared",
              "internal": true,
              "item": "function"
            },
            "PlayerMeta:_RemoveSuiteRole": {
              "name": "PlayerMeta:_RemoveSuiteRole",
              "description": "This will remove the given role to the player. This is called internally,\nthis should not be called manually.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sID",
                  "description": "The role ID to remove from the player."
                }
              ],
              "realm": "shared",
              "internal": true,
              "item": "function"
            },
            "PlayerMeta:_CacheSuiteRoles": {
              "name": "PlayerMeta:_CacheSuiteRoles",
              "description": "This will set the roles to the player's cache. This is called internally,\nthis should not be called manually.",
              "parameters": [
                {
                  "type": "table",
                  "name": "tRoles",
                  "description": "A sequential table of the role IDs."
                }
              ],
              "realm": "shared",
              "internal": true,
              "item": "function"
            },
            "PlayerMeta:_ClearSuiteRolesCache": {
              "name": "PlayerMeta:_ClearSuiteRolesCache",
              "description": "This will clear all roles from the given player cache. This is being called\ninternally and should not be manually.",
              "parameters": [
                {
                  "type": "player",
                  "name": "pPlayer",
                  "description": "This is the player that the roles are being cleared from."
                }
              ],
              "realm": "shared",
              "internal": true,
              "item": "function"
            },
            "PlayerMeta:_ApplySuiteRoles": {
              "name": "PlayerMeta:_ApplySuiteRoles",
              "description": "This will apply the player's roles. This is being called internally and\nshould not be manually.\nDo not return here, the functions below will either execute instantly or wait\nfor the modules to load.",
              "realm": "shared",
              "internal": true,
              "item": "function"
            },
            "PlayerMeta:_ApplyHighestSuiteRole": {
              "name": "PlayerMeta:_ApplyHighestSuiteRole",
              "description": "This will set the highest role of the player by looking at the player's\ncurrent roles. This is being called internally and should not be manually.",
              "realm": "shared",
              "internal": true,
              "item": "function"
            },
            "PlayerMeta:GetSuiteImmunity": {
              "name": "PlayerMeta:GetSuiteImmunity",
              "description": "Returns the current immunity of the player.",
              "returns": [
                {
                  "type": "number",
                  "description": "The immunity the given player has."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "PlayerMeta:HasHigherSuiteImmunity": {
              "name": "PlayerMeta:HasHigherSuiteImmunity",
              "description": "Check if the given player has a higher immunity than the current player.",
              "parameters": [
                {
                  "type": "player",
                  "name": "pSecondPlayer",
                  "description": "This is the player that the role immunity will be checked if it's lower."
                }
              ],
              "returns": [
                {
                  "type": "bool",
                  "description": "If the given player has a higher immunity than the current player."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "PlayerMeta:HasHigherOrEqualsSuiteImmunity": {
              "name": "PlayerMeta:HasHigherOrEqualsSuiteImmunity",
              "description": "Check if the given player has a higher or equals immunity than the current player.",
              "parameters": [
                {
                  "type": "player",
                  "name": "pSecondPlayer",
                  "description": "This is the player that the role immunity will be checked if it's lower or equals."
                }
              ],
              "returns": [
                {
                  "type": "bool",
                  "description": "If the first given player has a higher or equals immunity than the current player."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "PlayerMeta:_ApplySuitePermissions": {
              "name": "PlayerMeta:_ApplySuitePermissions",
              "description": "This will apply the permissions of the player. This is being called\ninternally and should not be manually.",
              "realm": "shared",
              "internal": true,
              "item": "function"
            },
            "PlayerMeta:AddSuiteRole": {
              "name": "PlayerMeta:AddSuiteRole",
              "description": "Add the a role to the PlayerMeta",
              "parameters": [
                {
                  "type": "SuiteRole|string",
                  "name": "aRole",
                  "description": "The role id or object"
                },
                {
                  "type": "function|nil",
                  "name": "fCallback",
                  "description": "fCallback(bSuccess)"
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "PlayerMeta:RemoveSuiteRole": {
              "name": "PlayerMeta:RemoveSuiteRole",
              "description": "Remove the a role from the PlayerMeta",
              "parameters": [
                {
                  "type": "SuiteRole|string",
                  "name": "aRole",
                  "description": "The role id or object"
                },
                {
                  "type": "function|nil",
                  "name": "fCallback",
                  "description": "fCallback(bSuccess)"
                }
              ],
              "realm": "server",
              "item": "function"
            }
          },
          "item": "category"
        },
        "Color": {
          "name": "Color",
          "pageType": "function",
          "subcategories": {
            "COLOR:SetAlpha": {
              "name": "COLOR:SetAlpha",
              "description": "Returns a new Color with the provided alpha value.",
              "parameters": [
                {
                  "type": "number",
                  "name": "iAplha",
                  "description": "Alpha value"
                }
              ],
              "returns": [{ "type": "Color", "description": "Color" }],
              "realm": "shared",
              "item": "function"
            },
            "COLOR:Mult": {
              "name": "COLOR:Mult",
              "parameters": [
                {
                  "type": "Color",
                  "name": "cOtherColor",
                  "description": "Color to multiply with"
                }
              ],
              "returns": [{ "type": "Color", "description": "Color" }],
              "realm": "shared",
              "item": "function"
            },
            "COLOR:ToLuminance": {
              "name": "COLOR:ToLuminance",
              "description": "Returns the Color luminance.",
              "returns": [{ "type": "number", "description": "Luminance" }],
              "realm": "shared",
              "item": "function"
            },
            "COLOR:Lighten": {
              "name": "COLOR:Lighten",
              "parameters": [
                {
                  "type": "number",
                  "name": "num",
                  "description": "Value to lighten by"
                }
              ],
              "returns": [{ "type": "Color", "description": "Color" }],
              "realm": "shared",
              "item": "function"
            },
            "COLOR:Darken": {
              "name": "COLOR:Darken",
              "parameters": [
                {
                  "type": "number",
                  "name": "num",
                  "description": "Value to darken by"
                }
              ],
              "returns": [{ "type": "Color", "description": "Color" }],
              "realm": "shared",
              "item": "function"
            },
            "COLOR:Invert": {
              "name": "COLOR:Invert",
              "returns": [{ "type": "Color", "description": "Color" }],
              "realm": "shared",
              "item": "function"
            },
            "COLOR:ToGrayscale": {
              "name": "COLOR:ToGrayscale",
              "returns": [{ "type": "Color", "description": "Color" }],
              "realm": "shared",
              "item": "function"
            },
            "COLOR:IsBright": {
              "name": "COLOR:IsBright",
              "returns": [
                { "type": "boolean", "description": "Color luminance >= 127.5" }
              ],
              "realm": "shared",
              "item": "function"
            },
            "COLOR:IsDark": {
              "name": "COLOR:IsDark",
              "returns": [
                { "type": "boolean", "description": "not Color:IsLight()" }
              ],
              "realm": "shared",
              "item": "function"
            }
          },
          "item": "category"
        },
        "MonoSuite.Config.SchemaGroup": {
          "name": "MonoSuite.Config.SchemaGroup",
          "pageType": "function",
          "subcategories": {
            "MonoSuite.Config.SchemaGroup:GetName": {
              "name": "MonoSuite.Config.SchemaGroup:GetName",
              "description": "Get the group name.",
              "returns": [
                { "type": "string", "description": "The name of the group." }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Config.SchemaGroup:GetDescription": {
              "name": "MonoSuite.Config.SchemaGroup:GetDescription",
              "description": "Get the group description.",
              "returns": [
                {
                  "type": "string",
                  "description": "The description of the group."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Config.SchemaGroup:GetKeys": {
              "name": "MonoSuite.Config.SchemaGroup:GetKeys",
              "description": "Get the group's keys.",
              "returns": [
                { "type": "table", "description": "The keys within the group." }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Config.SchemaGroup:HasKey": {
              "name": "MonoSuite.Config.SchemaGroup:HasKey",
              "description": "Check the existence of a group's key.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sName",
                  "description": "The name of the key."
                }
              ],
              "returns": [
                { "type": "boolean", "description": "Is the key defined?" }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Config.SchemaGroup:WithKey": {
              "name": "MonoSuite.Config.SchemaGroup:WithKey",
              "description": "Define a key on the group.",
              "parameters": [
                {
                  "type": "MonoSuite.Config.SchemaKey",
                  "name": "mKey",
                  "description": "The object representing the key."
                }
              ],
              "returns": [
                {
                  "type": "MonoSuite.Config.SchemaGroup",
                  "description": "The current group meta."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Config.SchemaGroup:Save": {
              "name": "MonoSuite.Config.SchemaGroup:Save",
              "description": "Register the group with the API.",
              "returns": [
                {
                  "type": "MonoSuite.Config.SchemaGroup",
                  "description": "The current group meta."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Config.SchemaGroup:_ApiTransform": {
              "name": "MonoSuite.Config.SchemaGroup:_ApiTransform",
              "description": "Transform the metadata into data the API understands.",
              "returns": [
                {
                  "type": "table",
                  "description": "Transformed data suitable for API usage."
                }
              ],
              "realm": "server",
              "internal": true,
              "item": "function"
            }
          },
          "item": "category",
          "description": "The object which represents a group in the config schema"
        },
        "MonoSuite.Config.SchemaKey": {
          "name": "MonoSuite.Config.SchemaKey",
          "pageType": "function",
          "subcategories": {
            "MonoSuite.Config.SchemaKey:GetName": {
              "name": "MonoSuite.Config.SchemaKey:GetName",
              "description": "Get the key name.",
              "returns": [
                { "type": "string", "description": "The name of the key." }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Config.SchemaKey:GetDescription": {
              "name": "MonoSuite.Config.SchemaKey:GetDescription",
              "description": "Get the key description.",
              "returns": [
                {
                  "type": "string",
                  "description": "The description of the key."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Config.SchemaKey:GetNullable": {
              "name": "MonoSuite.Config.SchemaKey:GetNullable",
              "description": "Get whether the key is nullable or not.",
              "returns": [
                { "type": "boolean", "description": "Is the key nullable?" }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Config.SchemaKey:GetNullableFromParent": {
              "name": "MonoSuite.Config.SchemaKey:GetNullableFromParent",
              "description": "Get whether the parent is nullable or not.",
              "returns": [
                {
                  "type": "boolean",
                  "description": "Is the parent key nullable?"
                }
              ],
              "realm": "server",
              "internal": true,
              "item": "function"
            },
            "MonoSuite.Config.SchemaKey:GetReadonly": {
              "name": "MonoSuite.Config.SchemaKey:GetReadonly",
              "description": "Get whether the key is readonly or not.",
              "returns": [
                { "type": "boolean", "description": "Is the key readonly?" }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Config.SchemaKey:GetInternal": {
              "name": "MonoSuite.Config.SchemaKey:GetInternal",
              "description": "Get whether the key is internal or not.",
              "returns": [
                { "type": "boolean", "description": "Is the key internal?" }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Config.SchemaKey:GetReadonlyFromParent": {
              "name": "MonoSuite.Config.SchemaKey:GetReadonlyFromParent",
              "description": "Get whether the parent is readonly or not.",
              "returns": [
                {
                  "type": "boolean",
                  "description": "Is the parent key readonly?"
                }
              ],
              "realm": "server",
              "internal": true,
              "item": "function"
            },
            "MonoSuite.Config.SchemaKey:GetDefault": {
              "name": "MonoSuite.Config.SchemaKey:GetDefault",
              "description": "Get the default value of a key, if any is defined.",
              "returns": [
                {
                  "type": "any",
                  "description": "The default value of the key."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Config.SchemaKey:GetType": {
              "name": "MonoSuite.Config.SchemaKey:GetType",
              "description": "Get the key type.",
              "returns": [
                {
                  "type": "string|nil",
                  "description": "The type of the key's value, if any."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Config.SchemaKey:GetKeys": {
              "name": "MonoSuite.Config.SchemaKey:GetKeys",
              "description": "Get the key's sub-keys.",
              "returns": [
                {
                  "type": "table",
                  "description": "Non sequential table of the key's sub-keys."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Config.SchemaKey:WithDescription": {
              "name": "MonoSuite.Config.SchemaKey:WithDescription",
              "description": "Set the key's description.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sDescription",
                  "description": "The description for the key."
                }
              ],
              "returns": [
                {
                  "type": "MonoSuite.Config.SchemaKey",
                  "description": "Object for this key"
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Config.SchemaKey:HasKey": {
              "name": "MonoSuite.Config.SchemaKey:HasKey",
              "description": "Check the existence of a key's sub-key.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sName",
                  "description": "The name of the sub-key."
                }
              ],
              "returns": [
                { "type": "boolean", "description": "Is the sub-key defined?" }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Config.SchemaKey:WithNullable": {
              "name": "MonoSuite.Config.SchemaKey:WithNullable",
              "description": "Should the key be nullable.",
              "parameters": [
                {
                  "type": "boolean",
                  "name": "bNullable",
                  "description": "Whether the key is nullable or not."
                }
              ],
              "returns": [
                {
                  "type": "MonoSuite.Config.SchemaKey",
                  "description": "Object for this key"
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Config.SchemaKey:WithReadonly": {
              "name": "MonoSuite.Config.SchemaKey:WithReadonly",
              "description": "Should the key be readonly.",
              "parameters": [
                {
                  "type": "boolean",
                  "name": "bReadonly",
                  "description": "Whether the key is readonly or not."
                }
              ],
              "returns": [
                {
                  "type": "MonoSuite.Config.SchemaKey",
                  "description": "Object for this key"
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Config.SchemaKey:WithInternal": {
              "name": "MonoSuite.Config.SchemaKey:WithInternal",
              "description": "Should the key be marked as internal.",
              "parameters": [
                {
                  "type": "boolean",
                  "name": "bNullable",
                  "description": "Whether the key is internal or not."
                }
              ],
              "returns": [
                {
                  "type": "MonoSuite.Config.SchemaKey",
                  "description": "Object for this key"
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Config.SchemaKey:WithType": {
              "name": "MonoSuite.Config.SchemaKey:WithType",
              "description": "Define a key's value type.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sType",
                  "description": "The type the key's value should be."
                }
              ],
              "returns": [
                {
                  "type": "MonoSuite.Config.SchemaKey",
                  "description": "Object for this key"
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Config.SchemaKey:WithDefault": {
              "name": "MonoSuite.Config.SchemaKey:WithDefault",
              "description": "Define a key's default value.",
              "parameters": [
                {
                  "type": "any",
                  "name": "aDefault",
                  "description": "The default value for the key."
                }
              ],
              "returns": [
                {
                  "type": "MonoSuite.Config.SchemaKey",
                  "description": "Object for this key"
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Config.SchemaKey:WithKey": {
              "name": "MonoSuite.Config.SchemaKey:WithKey",
              "description": "Define a sub-key on the key.",
              "parameters": [
                {
                  "type": "MonoSuite.Config.SchemaKey",
                  "name": "mKey",
                  "description": "The object representing the sub-key."
                }
              ],
              "returns": [
                {
                  "type": "MonoSuite.Config.SchemaKey",
                  "description": "Object for this key."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Config.SchemaKey:_Validate": {
              "name": "MonoSuite.Config.SchemaKey:_Validate",
              "description": "Validate the data on the key.",
              "returns": [
                {
                  "type": "string|MonoSuite.Config.SchemaKey",
                  "description": "string if an there is an error in validation, else the object for the key."
                }
              ],
              "realm": "server",
              "internal": true,
              "item": "function"
            },
            "MonoSuite.Config.SchemaKey:_ApiTransform": {
              "name": "MonoSuite.Config.SchemaKey:_ApiTransform",
              "description": "Transform the metadata into data the API understands.",
              "returns": [
                {
                  "type": "table",
                  "description": "Transformed data suitable for API usage."
                }
              ],
              "realm": "server",
              "internal": true,
              "item": "function"
            }
          },
          "item": "category",
          "description": "The object which represents a key in the config schema"
        },
        "MnsUser": {
          "name": "MnsUser",
          "pageType": "function",
          "subcategories": {
            "MonoSuite.User": {
              "name": "MonoSuite.User",
              "description": "This will create a MnsUser with the given data.",
              "parameters": [
                {
                  "type": "Player|string|nil",
                  "name": "aIdentifier",
                  "description": "User identifier. Can be the Player, a SteamID, SteamID64 or MonoSuite user ID. Optional if tData is provided."
                },
                {
                  "type": "boolean|table|nil",
                  "name": "bIsConsole",
                  "description": "Whether the user is the console or not. This can be tData instead as a shortcut."
                },
                {
                  "type": "table|nil",
                  "name": "tData",
                  "description": "Data required to initialize the MnsUser instance. Optional if bIsConsole is true or if aIdentifier is set and the player is online in the server."
                }
              ],
              "returns": [
                {
                  "type": "MnsUser|nil",
                  "description": "The MonoSuite User instance. Will return nil if the info is invalid."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.User:GetName": {
              "name": "MonoSuite.User:GetName",
              "description": "Returns the MnsUser name better used for message display.\n\nWill return something like \"Offline player [STEAMID64/MonoSuite ID]\" when the player is offline.",
              "returns": [{ "type": "string", "description": "MnsUser name." }],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.User:GetActualName": {
              "name": "MonoSuite.User:GetActualName",
              "description": "Returns the MnsUser name better used for UI.\n\nWill return the connected player name or the plain stored name data.",
              "returns": [{ "type": "string", "description": "MnsUser name." }],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.User:GetTruePlayerName": {
              "name": "MonoSuite.User:GetTruePlayerName",
              "description": "Returns the non-RP online player's name.\n\nWill return the connected player Steam name or `nil`.",
              "returns": [
                { "type": "string|nil", "description": "MnsUser name." }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.User:GetFullName": {
              "name": "MonoSuite.User:GetFullName",
              "description": "Returns the full online player's name composed of the RP name and Steam name.\n\nWill return the full connected player name or `nil`.",
              "returns": [
                { "type": "string|nil", "description": "MnsUser name." }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.User:GetPlayer": {
              "name": "MonoSuite.User:GetPlayer",
              "description": "Returns the MnsUser Player.",
              "returns": [
                {
                  "type": "Player|nil",
                  "description": "MnsUser Player. nil when the player is offline."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.User:GetID": {
              "name": "MonoSuite.User:GetID",
              "description": "Returns the best MnsUser ID available.",
              "returns": [
                {
                  "type": "string",
                  "description": "Will return the MonoSuite ID or SteamID64."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.User:GetSteamID32": {
              "name": "MonoSuite.User:GetSteamID32",
              "description": "Returns the MnsUser SteamID32.",
              "returns": [
                { "type": "string", "description": "MnsUser SteamID32." }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.User:GetSteamID64": {
              "name": "MonoSuite.User:GetSteamID64",
              "description": "Returns the MnsUser SteamID64.",
              "returns": [
                { "type": "string", "description": "MnsUser SteamID64." }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.User:GetMonoSuiteID": {
              "name": "MonoSuite.User:GetMonoSuiteID",
              "description": "Returns the MnsUser ID.",
              "returns": [{ "type": "string", "description": "MnsUser ID." }],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.User:GetBestTargetableID": {
              "name": "MonoSuite.User:GetBestTargetableID",
              "description": "Returns the best ID to use for commands.\n\nWill return nil on offline bots.",
              "returns": [
                {
                  "type": "string|nil",
                  "description": "Best ID to use for targetting."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.User:HasData": {
              "name": "MonoSuite.User:HasData",
              "description": "Returns whether the MnsUser has data.",
              "returns": [
                { "type": "bool", "description": "MnsUser has data." }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.User:GetImmunity": {
              "name": "MonoSuite.User:GetImmunity",
              "description": "Returns MnsUser immunity value.",
              "returns": [
                { "type": "number", "description": "MnsUser immunity." }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.User:GetPlayTime": {
              "name": "MonoSuite.User:GetPlayTime",
              "description": "Returns MnsUser play time.",
              "returns": [
                { "type": "number", "description": "MnsUser play time." }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.User:GetHighestSuiteRole": {
              "name": "MonoSuite.User:GetHighestSuiteRole",
              "description": "Returns the highest role of the MnsUser.",
              "returns": [
                {
                  "type": "SuiteRole",
                  "description": "The highest role of the MnsUser."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.User:GetColor": {
              "name": "MonoSuite.User:GetColor",
              "description": "Returns the MnsUser color based on its highest role.",
              "returns": [
                { "type": "Color|nil", "description": "The MnsUser's color." }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.User:_CalculateImmunity": {
              "name": "MonoSuite.User:_CalculateImmunity",
              "description": "Calculate and returns MnsUser immunity value and their highest role.",
              "returns": [
                { "type": "number", "description": "MnsUser immunity." },
                {
                  "type": "SuiteRole",
                  "description": "The highest role of the MnsUser."
                }
              ],
              "realm": "shared",
              "internal": true,
              "item": "function"
            },
            "MonoSuite.User:GetRoleIDs": {
              "name": "MonoSuite.User:GetRoleIDs",
              "description": "Returns the role IDs from the MnsUser.",
              "returns": [
                {
                  "type": "table|nil",
                  "description": "A sequential table with the role IDs."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.User:GetRoles": {
              "name": "MonoSuite.User:GetRoles",
              "description": "Gets the roles from the MnsUser.",
              "returns": [
                {
                  "type": "table|nil",
                  "description": "A sequential table with the roles."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.User:_CachePermissions": {
              "name": "MonoSuite.User:_CachePermissions",
              "description": "Cache all the permissions the MnsUser has.",
              "returns": [
                {
                  "type": "table",
                  "description": "A table with the all permissions."
                }
              ],
              "realm": "shared",
              "internal": true,
              "item": "function"
            },
            "MonoSuite.User:GetPermissions": {
              "name": "MonoSuite.User:GetPermissions",
              "description": "Gets the permissions the MnsUser has.",
              "returns": [
                {
                  "type": "table",
                  "description": "A sequential table with the roles."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.User:HasPermissions": {
              "name": "MonoSuite.User:HasPermissions",
              "description": "Check if the MnsUser has the given permission(s).",
              "parameters": [
                {
                  "type": "string",
                  "name": "...",
                  "description": "Permission name(s) to check."
                }
              ],
              "returns": [
                {
                  "type": "boolean|nil",
                  "description": "Whether the player has the permission(s) or not."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.User:GetActiveBan": {
              "name": "MonoSuite.User:GetActiveBan",
              "description": "Returns the MnsUser active ban table.",
              "returns": [
                { "type": "table|nil", "description": "Active ban table." }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.User:GetActiveBanId": {
              "name": "MonoSuite.User:GetActiveBanId",
              "description": "Returns the MnsUser active ban ID.",
              "returns": [
                { "type": "string|nil", "description": "Active ban ID." }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.User:GetActiveBanExpiration": {
              "name": "MonoSuite.User:GetActiveBanExpiration",
              "description": "Returns the MnsUser active ban expiration.",
              "returns": [
                {
                  "type": "number|nil",
                  "description": "Active ban expiration."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.User:HasRole": {
              "name": "MonoSuite.User:HasRole",
              "description": "Returns whether the MnsUser has the specified role.",
              "parameters": [
                {
                  "type": "SuiteRole|string",
                  "name": "aRole",
                  "description": "Role object or ID."
                }
              ],
              "returns": [
                {
                  "type": "boolean",
                  "description": "True if the player has the role; otherwise false."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.User:HasAnyRoleData": {
              "name": "MonoSuite.User:HasAnyRoleData",
              "description": "Returns whether the MnsUser has any role data.",
              "returns": [
                {
                  "type": "boolean",
                  "description": "True if the player has role data; otherwise false."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.User:IsPlayer": {
              "name": "MonoSuite.User:IsPlayer",
              "description": "Returns whether MnsUser is a player. (aka not Console)",
              "returns": [{ "type": "boolean", "description": "Is Player." }],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.User:IsConnected": {
              "name": "MonoSuite.User:IsConnected",
              "description": "Returns whether MnsUser is connected (aka Player valid).",
              "returns": [
                { "type": "boolean", "description": "Is MnsUser connected." }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.User:IsConsole": {
              "name": "MonoSuite.User:IsConsole",
              "description": "Returns whether MnsUser is the console.",
              "returns": [
                { "type": "boolean", "description": "Is MnsUser Console." }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.User:IsBot": {
              "name": "MonoSuite.User:IsBot",
              "description": "Returns whether MnsUser is a bot.",
              "returns": [
                { "type": "boolean", "description": "Is MnsUser a bot." }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.User:IsTrueUser": {
              "name": "MonoSuite.User:IsTrueUser",
              "description": "Returns whether MnsUser is not console and not a bot.",
              "returns": [
                { "type": "boolean", "description": "Is true MnsUser." }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.User:IsReachable": {
              "name": "MonoSuite.User:IsReachable",
              "description": "Returns whether MnsUser is reachable.\nThis returns whether the MnsUser is connected or whether the MnsUser is the console.",
              "returns": [
                { "type": "boolean", "description": "Is MnsUser reachable." }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.User:IsBanned": {
              "name": "MonoSuite.User:IsBanned",
              "description": "Returns whether MnsUser is banned.\nThis returns whether the MnsUser is connected or whether the MnsUser is the console.",
              "returns": [
                { "type": "boolean", "description": "Is MnsUser banned." }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.User:GetProfileURL": {
              "name": "MonoSuite.User:GetProfileURL",
              "description": "Returns the Steam profile URL.",
              "returns": [
                { "type": "string|nil", "description": "Steam profile URL." }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.User:NotifyPhrase": {
              "name": "MonoSuite.User:NotifyPhrase",
              "description": "This will add a phrased chat notification to the MnsUser.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sPhraseIdentifier",
                  "description": "The phrase that will be displayed on the client."
                },
                {
                  "type": "table|nil",
                  "name": "tPhraseData",
                  "description": "(Optional) The table with the data for the phrase."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.User:Fetch": {
              "name": "MonoSuite.User:Fetch",
              "description": "Creates a new MnsUser with fresh data from the API.",
              "parameters": [
                {
                  "type": "function",
                  "name": "fCallback",
                  "description": "Callback with new fetched user as argument."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.User:_Fetch": {
              "name": "MonoSuite.User:_Fetch",
              "description": "DEPRECATED DO NOT USE\nThis is as a static method",
              "parameters": [
                {
                  "type": "string",
                  "name": "sIdentifier",
                  "description": "MonoSuite ID."
                },
                {
                  "type": "function",
                  "name": "fCallback",
                  "description": "Callback."
                }
              ],
              "realm": "shared",
              "internal": true,
              "item": "function"
            },
            "MonoSuite.FetchUser": {
              "name": "MonoSuite.FetchUser",
              "description": "DEPRECATED DO NOT USE\nThis is as a static method",
              "parameters": [
                {
                  "type": "string",
                  "name": "sIdentifier",
                  "description": "MonoSuite ID."
                },
                {
                  "type": "function",
                  "name": "fCallback",
                  "description": "Callback."
                }
              ],
              "realm": "shared",
              "internal": true,
              "item": "function"
            }
          },
          "item": "category",
          "description": "Helper class for online/offline users"
        },
        "PluginInfoObject": {
          "name": "PluginInfoObject",
          "pageType": "function",
          "subcategories": {
            "MonoSuite.Plugin.PluginInfoObject:GetName": {
              "name": "MonoSuite.Plugin.PluginInfoObject:GetName",
              "returns": [{ "type": "string", "description": "Plugin name." }],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Plugin.PluginInfoObject:GetDescription": {
              "name": "MonoSuite.Plugin.PluginInfoObject:GetDescription",
              "returns": [
                { "type": "string", "description": "Plugin description." }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Plugin.PluginInfoObject:IsEnabled": {
              "name": "MonoSuite.Plugin.PluginInfoObject:IsEnabled",
              "returns": [
                { "type": "bool", "description": "Is the plugin enabled." }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Plugin.PluginInfoObject:ShouldBeEnabled": {
              "name": "MonoSuite.Plugin.PluginInfoObject:ShouldBeEnabled",
              "returns": [
                {
                  "type": "bool",
                  "description": "Should the plugin be enabled."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Plugin.PluginInfoObject:Enable": {
              "name": "MonoSuite.Plugin.PluginInfoObject:Enable",
              "description": "Enable the plugin.",
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Plugin.PluginInfoObject:Disable": {
              "name": "MonoSuite.Plugin.PluginInfoObject:Disable",
              "description": "Disable the plugin.",
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Plugin.PluginInfoObject:Remove": {
              "name": "MonoSuite.Plugin.PluginInfoObject:Remove",
              "description": "Remove the plugin.",
              "realm": "shared",
              "item": "function"
            }
          },
          "item": "category",
          "description": "Plugin object. Used to manage plugins."
        },
        "SuiteRole": {
          "name": "SuiteRole",
          "pageType": "function",
          "subcategories": {
            "MonoSuite.Role.SuiteRole:GetID": {
              "name": "MonoSuite.Role.SuiteRole:GetID",
              "description": "Returns the role id.",
              "returns": [
                { "type": "string", "description": "The id of the role." }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Role.SuiteRole:GetName": {
              "name": "MonoSuite.Role.SuiteRole:GetName",
              "description": "Returns the role name.",
              "returns": [
                { "type": "string", "description": "The name of the role." }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Role.SuiteRole:GetAliases": {
              "name": "MonoSuite.Role.SuiteRole:GetAliases",
              "description": "Returns the role aliases.",
              "returns": [
                {
                  "type": "table",
                  "description": "A sequential table of aliases of the role."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Role.SuiteRole:GetFirstAlias": {
              "name": "MonoSuite.Role.SuiteRole:GetFirstAlias",
              "description": "Returns the first role alias.",
              "returns": [
                { "type": "string", "description": "The first role alias." }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Role.SuiteRole:GetColor": {
              "name": "MonoSuite.Role.SuiteRole:GetColor",
              "description": "Returns the colour.",
              "returns": [
                { "type": "table", "description": "The colour of the role." }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Role.SuiteRole:GetAncestor": {
              "name": "MonoSuite.Role.SuiteRole:GetAncestor",
              "description": "Returns the ancestor.",
              "returns": [
                { "type": "string|nil", "description": "The ancestor role." }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Role.SuiteRole:GetAncestors": {
              "name": "MonoSuite.Role.SuiteRole:GetAncestors",
              "description": "Returns all the ancestors.",
              "returns": [
                {
                  "type": "table",
                  "description": "A table of all ancestors roles."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Role.SuiteRole:GetMembers": {
              "name": "MonoSuite.Role.SuiteRole:GetMembers",
              "description": "Returns all of the members of a role.",
              "returns": [
                {
                  "type": "table",
                  "description": "The list of all players with that role"
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Role.SuiteRole:GetImmunity": {
              "name": "MonoSuite.Role.SuiteRole:GetImmunity",
              "description": "Get the role immunity.",
              "returns": [
                { "type": "number", "description": "The immunity of the role." }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Role.SuiteRole:GetHigherOrEqualImmunityRoles": {
              "name": "MonoSuite.Role.SuiteRole:GetHigherOrEqualImmunityRoles",
              "description": "This will return all roles with higher or equal immunity.",
              "returns": [
                {
                  "type": "all",
                  "description": "roles with higher or equal immunity"
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Role.SuiteRole:GetHigherImmunityRoles": {
              "name": "MonoSuite.Role.SuiteRole:GetHigherImmunityRoles",
              "description": "Returns all roles with higher immunity.",
              "returns": [
                {
                  "type": "table",
                  "description": "All roles with higher immunity."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Role.SuiteRole:GetLowerImmunityRoles": {
              "name": "MonoSuite.Role.SuiteRole:GetLowerImmunityRoles",
              "description": "Returns all roles with lower immunity.",
              "returns": [
                {
                  "type": "table",
                  "description": "All roles with lower immunity."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Role.SuiteRole:GetDescription": {
              "name": "MonoSuite.Role.SuiteRole:GetDescription",
              "description": "Get the role description.",
              "returns": [
                {
                  "type": "string",
                  "description": "The description of the role."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Role.SuiteRole:GetPermissions": {
              "name": "MonoSuite.Role.SuiteRole:GetPermissions",
              "description": "Get the role non sequential permissions table.",
              "returns": [
                {
                  "type": "table",
                  "description": "The non sequential permissions table of the role."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Role.SuiteRole:HasPermission": {
              "name": "MonoSuite.Role.SuiteRole:HasPermission",
              "description": "Check if the role has the given permission.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sPermission",
                  "description": "The id of the given permission."
                }
              ],
              "returns": [
                {
                  "type": "bool",
                  "description": "True if the role has the permission, false otherwise."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Role.SuiteRole:HasAlias": {
              "name": "MonoSuite.Role.SuiteRole:HasAlias",
              "description": "Checks if the role has the given alias.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sAlias",
                  "description": "The alias to find."
                }
              ],
              "returns": [
                {
                  "type": "bool",
                  "description": "True if the role has the alias, false otherwise."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Role.SuiteRole:GetBanTime": {
              "name": "MonoSuite.Role.SuiteRole:GetBanTime",
              "description": "Get the role ban time.",
              "returns": [
                {
                  "type": "number",
                  "description": "The maximum banning time for the role."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Role.SuiteRole:Fetch": {
              "name": "MonoSuite.Role.SuiteRole:Fetch",
              "description": "Fetch the role, all reference to this table will be updated",
              "parameters": [
                {
                  "type": "function",
                  "name": "fCallback",
                  "description": "fCallback(bSuccess)"
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Role.SuiteRole": {
              "name": "MonoSuite.Role.SuiteRole",
              "description": "This will create a new role and add it to the role cache.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sName",
                  "description": "The name of the role."
                },
                {
                  "type": "table",
                  "name": "sAliases",
                  "description": "A sequential list of aliases for the role."
                },
                {
                  "type": "string",
                  "name": "sID",
                  "description": "The id of the role."
                }
              ],
              "returns": [
                {
                  "type": "MonoSuite.Role.SuiteRole",
                  "description": "The created role"
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Role.SuiteRole:_WithImmunity": {
              "name": "MonoSuite.Role.SuiteRole:_WithImmunity",
              "description": "Define the role immunity (locally only, shouldn't be used unless you know what you are doing).",
              "parameters": [
                {
                  "type": "number",
                  "name": "iImmunity",
                  "description": "The immunity, can be between 0 and 1000."
                }
              ],
              "returns": [
                {
                  "type": "MonoSuite.Role.SuiteRole",
                  "description": "The role meta."
                }
              ],
              "realm": "shared",
              "internal": true,
              "item": "function"
            },
            "MonoSuite.Role.SuiteRole:_WithPermissions": {
              "name": "MonoSuite.Role.SuiteRole:_WithPermissions",
              "description": "Defines the role permissions (locally only, shouldn't be used unless you know what you are doing).",
              "parameters": [
                {
                  "type": "string",
                  "name": "tPermissions",
                  "description": "Table of permissions the role should have."
                }
              ],
              "returns": [
                {
                  "type": "MonoSuite.Role.SuiteRole",
                  "description": "The role meta."
                }
              ],
              "realm": "shared",
              "internal": true,
              "item": "function"
            },
            "MonoSuite.Role.SuiteRole:_WithColor": {
              "name": "MonoSuite.Role.SuiteRole:_WithColor",
              "description": "Defines the role color (locally only, shouldn't be used unless you know what you are doing).",
              "parameters": [
                {
                  "type": "string",
                  "name": "tColours",
                  "description": "Color of colours the role should use."
                }
              ],
              "returns": [
                {
                  "type": "MonoSuite.Role.SuiteRole",
                  "description": "The role meta."
                }
              ],
              "realm": "shared",
              "internal": true,
              "item": "function"
            },
            "MonoSuite.Role.SuiteRole:_WithBanTime": {
              "name": "MonoSuite.Role.SuiteRole:_WithBanTime",
              "description": "Defines the role ban time.",
              "parameters": [
                {
                  "type": "number",
                  "name": "iBanTime",
                  "description": "The maximum banning time for the role."
                }
              ],
              "returns": [
                {
                  "type": "MonoSuite.Role.SuiteRole",
                  "description": "The role meta."
                }
              ],
              "realm": "shared",
              "internal": true,
              "item": "function"
            },
            "MonoSuite.Role.SuiteRole:_WithAncestor": {
              "name": "MonoSuite.Role.SuiteRole:_WithAncestor",
              "description": "Defines the role ancestor (the role this role inherits from)",
              "parameters": [
                {
                  "type": "string",
                  "name": "sAncestor",
                  "description": "The ancestor ID."
                }
              ],
              "returns": [
                {
                  "type": "MonoSuite.Role.SuiteRole",
                  "description": "The role meta."
                }
              ],
              "realm": "shared",
              "internal": true,
              "item": "function"
            },
            "MonoSuite.Role.SuiteRole:_ApplyToMembers": {
              "name": "MonoSuite.Role.SuiteRole:_ApplyToMembers",
              "description": "Applies the role data to the members, i.e: permission, immunity, etc. This\nis called internally and should not be called manually.",
              "returns": [{ "type": "table", "description": "Members" }],
              "realm": "shared",
              "internal": true,
              "item": "function"
            },
            "MonoSuite.Role.SuiteRole:AddPermission": {
              "name": "MonoSuite.Role.SuiteRole:AddPermission",
              "description": "Adds a permission to the given role.",
              "parameters": [
                {
                  "type": "mPermission|string",
                  "name": "aPermission",
                  "description": "The permission to add."
                },
                {
                  "type": "function",
                  "name": "fCallback",
                  "description": "The function to execute if it succeed"
                },
                {
                  "type": "bool|nil",
                  "name": "bAllowExisting",
                  "description": "(Optional)"
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Role.SuiteRole:RemovePermission": {
              "name": "MonoSuite.Role.SuiteRole:RemovePermission",
              "description": "Removes a permission to the given role.",
              "parameters": [
                {
                  "type": "string",
                  "name": "aPermission",
                  "description": "The permission to remove."
                },
                {
                  "type": "function",
                  "name": "fCallback",
                  "description": "The function to execute if it succeed"
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Role.SuiteRole:Update": {
              "name": "MonoSuite.Role.SuiteRole:Update",
              "description": "Update the role.",
              "parameters": [
                {
                  "type": "string|nil",
                  "name": "sName",
                  "description": "The role name."
                },
                {
                  "type": "table|nil",
                  "name": "tAliases",
                  "description": "Table of aliases for the role."
                },
                {
                  "type": "number|nil",
                  "name": "iImmunity",
                  "description": "The immunity value."
                },
                {
                  "type": "string|nil",
                  "name": "sInherits",
                  "description": "The role inherits from."
                },
                {
                  "type": "string|nil",
                  "name": "sColor",
                  "description": "Color in hex format."
                },
                {
                  "type": "function|nil",
                  "name": "fCallback",
                  "description": "The callback with a success parameter."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Role.SuiteRole:Delete": {
              "name": "MonoSuite.Role.SuiteRole:Delete",
              "description": "Delete the role.",
              "parameters": [
                {
                  "type": "function|nil",
                  "name": "fCallback",
                  "description": "The callback with a success parameter."
                }
              ],
              "realm": "server",
              "item": "function"
            }
          },
          "item": "category",
          "description": "The object that represent a role in MonoSuite"
        },
        "TICKET": {
          "name": "TICKET",
          "pageType": "function",
          "subcategories": {},
          "item": "category",
          "description": "Ticket class\nTODO: documentation"
        }
      },
      "item": "category"
    },
    "libraries": {
      "name": "Libraries",
      "pageType": "function",
      "subcategories": {
        "util": {
          "name": "util",
          "pageType": "function",
          "subcategories": {
            "util.ParseDuration": {
              "name": "util.ParseDuration",
              "description": "Converts a duration (e.g 1d12h, 1w, 1y4n2h) to the specified unit and get a nice text. (Clamps all numbers between 0 and 99).",
              "parameters": [
                {
                  "type": "string",
                  "name": "sInput",
                  "description": "The input duration."
                },
                {
                  "type": "string",
                  "name": "sInputUnit",
                  "description": "The input unit: s, m (default), h, d, w, n, y."
                },
                {
                  "type": "string",
                  "name": "sOutputUnit",
                  "description": "The output unit wanted s, m (default), h, d, w, n, y."
                }
              ],
              "returns": [
                {
                  "type": "number",
                  "description": "The duration in the specified unit (or minute by default)."
                },
                {
                  "type": "text",
                  "description": "The duration in text form (1 year, 3 days, etc)."
                }
              ],
              "item": "function"
            },
            "util.NiceBenchmarkTime": {
              "name": "util.NiceBenchmarkTime",
              "description": "Basically like string.NiceTime() but for requests benchmark...\nOnly shows shorter unit names in seconds and miliseconds.",
              "parameters": [
                {
                  "type": "number",
                  "name": "iSeconds",
                  "description": "The number to format, in seconds."
                }
              ],
              "returns": [
                {
                  "type": "string",
                  "description": "A nicely formatted time string."
                }
              ],
              "item": "function"
            },
            "util.IsMNSInDevelopmentMode": {
              "name": "util.IsMNSInDevelopmentMode",
              "description": "Checks if the current environment is in development mode.",
              "returns": [
                {
                  "type": "bool",
                  "description": "True if the current environment is development mode, false otherwhise."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "util.IsMNSInProductionMode": {
              "name": "util.IsMNSInProductionMode",
              "description": "Checks if the current environment is in production mode.",
              "returns": [
                {
                  "type": "bool",
                  "description": "True if the current environment is production mode, false otherwhise."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "util.IsAddonInstalled": {
              "name": "util.IsAddonInstalled",
              "description": "Checks if the given addon is installed.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sAddon",
                  "description": "The addon's folder name."
                }
              ],
              "returns": [
                {
                  "type": "bool",
                  "description": "If the given addon name is installed, or in the in the addon cache from the server."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "util.SaveAddonAsInstalled": {
              "name": "util.SaveAddonAsInstalled",
              "description": "Saves the given string in addon cache, this will be networked to the client.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sAddon",
                  "description": "The addon's name."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "util.IsCurrentGamemode": {
              "name": "util.IsCurrentGamemode",
              "description": "Checks if the given string is the name of the current gamemode.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sGamemode",
                  "description": "The gamemode's name."
                }
              ],
              "returns": [
                {
                  "type": "bool",
                  "description": "Whether or not the given string is the name of the current gamemode."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "util.IsValidLowerString": {
              "name": "util.IsValidLowerString",
              "description": "Checks if the input is a lower string.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sString",
                  "description": "The input string."
                }
              ],
              "returns": [
                {
                  "type": "bool",
                  "description": "True if the input is valid and a lower string."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "util.IsValidUpperString": {
              "name": "util.IsValidUpperString",
              "description": "Checks if the input is a upper string.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sString",
                  "description": "The input string."
                }
              ],
              "returns": [
                {
                  "type": "bool",
                  "description": "True if the input is valid and a upper string."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "util.IsValidNumber": {
              "name": "util.IsValidNumber",
              "description": "Checks if the input is a valid number, and if it meets the given constraints.",
              "parameters": [
                {
                  "type": "number",
                  "name": "iNumber",
                  "description": "The input number."
                },
                {
                  "type": "number",
                  "name": "iMaximum",
                  "description": "(Optional) The maximum the number can be."
                },
                {
                  "type": "number",
                  "name": "iMinimum",
                  "description": "(Optional) The mininum the number can be."
                }
              ],
              "returns": [
                {
                  "type": "bool",
                  "description": "True if the number is valid and meets the given constraints."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "util.IsValidWeapon": {
              "name": "util.IsValidWeapon",
              "description": "Checks if the input is a valid weapon.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sString",
                  "description": "The input string."
                }
              ],
              "returns": [
                {
                  "type": "bool",
                  "description": "True if the input is a valid weapon."
                }
              ],
              "realm": "shared",
              "item": "function"
            }
          },
          "item": "category",
          "description": "Utility Library for MonoSuite"
        },
        "player": {
          "name": "player",
          "pageType": "function",
          "subcategories": {
            "player.FindAllByString": {
              "name": "player.FindAllByString",
              "description": "Finds the player with the given string.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sSearch",
                  "description": "The string that will be matched to find players."
                },
                {
                  "type": "table|nil",
                  "name": "tPlayers",
                  "description": "(Optional)"
                }
              ],
              "returns": [
                {
                  "type": "table",
                  "description": "A table with all matching players."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "player.FindByString": {
              "name": "player.FindByString",
              "description": "Finds the player with the given string, the highest maching one.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sSearch",
                  "description": "The string that will be matched to find the player."
                },
                {
                  "type": "table|nil",
                  "name": "tPlayers",
                  "description": "(Optional)"
                }
              ],
              "returns": [
                {
                  "type": "player",
                  "description": "The player with the highest match, or nil if none was found and false if multiple where found."
                }
              ],
              "realm": "shared",
              "item": "function"
            }
          },
          "item": "category",
          "description": "Helpful functions for players."
        },
        "string": {
          "name": "string",
          "pageType": "function",
          "subcategories": {
            "string.joinWithDots": {
              "name": "string.joinWithDots",
              "description": "Joins the string with dots.",
              "parameters": [
                {
                  "type": "number",
                  "name": "iStart",
                  "description": "Where the join should start."
                },
                {
                  "type": "number",
                  "name": "iSkipEnd",
                  "description": "How many should we skip from the end?"
                },
                {
                  "type": "string",
                  "name": "...",
                  "description": "The strings that will be joined."
                }
              ],
              "returns": [
                {
                  "type": "string",
                  "description": "A string that is joined with dots."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "string.isLowerCase": {
              "name": "string.isLowerCase",
              "description": "Checks if the given string is lowercase.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sString",
                  "description": "The string that will be checked if it's lowercase."
                }
              ],
              "returns": [
                {
                  "type": "bool",
                  "description": "A bool saying if the given string is all in lowercase."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "string.isUpperCase": {
              "name": "string.isUpperCase",
              "description": "Checks if the given string is uppercase.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sString",
                  "description": "The string that will be checked if it's uppercase."
                }
              ],
              "returns": [
                {
                  "type": "bool",
                  "description": "A bool saying if the given string is all in uppercase."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "string.replaceFirst": {
              "name": "string.replaceFirst",
              "description": "Replaces the first occurence of the given string.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sString",
                  "description": "The string that will be replaced."
                },
                {
                  "type": "string",
                  "name": "sFind",
                  "description": "The string that will be searched for and replaced."
                },
                {
                  "type": "string",
                  "name": "sReplacement",
                  "description": "The replacement string for the found string."
                }
              ],
              "returns": [
                {
                  "type": "string",
                  "description": "The new string with the replacement."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "string.textWrap": {
              "name": "string.textWrap",
              "description": "Wrap strings to not become wider than the given amount of pixels",
              "parameters": [
                {
                  "type": "string",
                  "name": "sString",
                  "description": "The text that will be wrapped."
                },
                {
                  "type": "string",
                  "name": "sFont",
                  "description": "The font for the wrap."
                },
                {
                  "type": "number",
                  "name": "nMaxWidth",
                  "description": "The max width of this text."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "string.toArgs": {
              "name": "string.toArgs",
              "description": "Convert the given string into table, argument values must be separated by a whitespace, simple and double quotes are supported",
              "parameters": [
                {
                  "type": "string",
                  "name": "sString",
                  "description": "The string that will be parsed"
                }
              ],
              "returns": [
                { "type": "table", "description": "The arguments table" }
              ],
              "realm": "shared",
              "item": "function"
            }
          },
          "item": "category",
          "description": "Helpful functions for strings."
        },
        "table": {
          "name": "table",
          "pageType": "function",
          "subcategories": {
            "table.Combine": {
              "name": "table.Combine",
              "description": "Combines the given tables.",
              "parameters": [
                {
                  "type": "boolean",
                  "name": "bIsSequential",
                  "description": "Is the given table sequential?"
                },
                {
                  "type": "table",
                  "name": "...",
                  "description": "The tables that will be combined."
                }
              ],
              "returns": [
                {
                  "type": "table",
                  "description": "All tables combined into one table."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "table.CreateFromIterator": {
              "name": "table.CreateFromIterator",
              "description": "Creates a table from an iterator.",
              "parameters": [
                {
                  "type": "function",
                  "name": "The",
                  "description": "iterator for the table creation."
                }
              ],
              "returns": [
                { "type": "table", "description": "The created table." }
              ],
              "realm": "shared",
              "item": "function"
            },
            "table.Filter": {
              "name": "table.Filter",
              "description": "Filters everything out where the function equals true.",
              "parameters": [
                {
                  "type": "table",
                  "name": "tTable",
                  "description": "The given table."
                },
                {
                  "type": "function",
                  "name": "The",
                  "description": "function to filter, if it returns true it'll be filtered."
                }
              ],
              "returns": [
                { "type": "table", "description": "The new filtered table." }
              ],
              "realm": "shared",
              "item": "function"
            },
            "table.First": {
              "name": "table.First",
              "description": "Returns the first value in the table where the filter returns true",
              "parameters": [
                {
                  "type": "table",
                  "name": "tTable",
                  "description": "the given table."
                },
                {
                  "type": "function",
                  "name": "The",
                  "description": "function to filter, if it returns true, this will be the result"
                }
              ],
              "returns": [
                { "type": "any", "description": "the returned value" }
              ],
              "realm": "shared",
              "item": "function"
            },
            "table.Map": {
              "name": "table.Map",
              "description": "Performs the given action on every element.",
              "parameters": [
                {
                  "type": "table",
                  "name": "tTable",
                  "description": "The given table."
                },
                { "type": "function", "name": "The", "description": "action." }
              ],
              "returns": [{ "type": "table", "description": "The new table." }],
              "realm": "shared",
              "item": "function"
            },
            "table.Reduce": {
              "name": "table.Reduce",
              "description": "TODO: Document",
              "realm": "shared",
              "item": "function"
            },
            "table.MapJS": {
              "name": "table.MapJS",
              "description": "Performs the given action on every element.",
              "parameters": [
                {
                  "type": "table",
                  "name": "tTable",
                  "description": "The given table."
                },
                { "type": "function", "name": "The", "description": "action." }
              ],
              "returns": [{ "type": "table", "description": "The new table." }],
              "realm": "shared",
              "item": "function"
            },
            "table.FilterSequence": {
              "name": "table.FilterSequence",
              "description": "Filters everything out where the function equals true and fills the gap to keep the sequental list.",
              "parameters": [
                {
                  "type": "table",
                  "name": "tTable",
                  "description": "The given table."
                },
                {
                  "type": "function",
                  "name": "The",
                  "description": "function to filter, if it returns true it'll be filtered."
                }
              ],
              "returns": [
                { "type": "table", "description": "The new filtered table." }
              ],
              "realm": "shared",
              "item": "function"
            },
            "table.Remove": {
              "name": "table.Remove",
              "description": "Has to be a sequential table removes elements from the table.",
              "parameters": [
                {
                  "type": "table",
                  "name": "tTable",
                  "description": "The given table."
                },
                {
                  "type": "number",
                  "name": "iIndex",
                  "description": "The start index."
                },
                {
                  "type": "number",
                  "name": "iAmount",
                  "description": "The amount to remove."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "table.IsEmpty": {
              "name": "table.IsEmpty",
              "description": "Checks whether the given table is emtpy, use #table == 0 for sequential tables.",
              "parameters": [
                {
                  "type": "table",
                  "name": "tTable",
                  "description": "The given table."
                }
              ],
              "returns": [
                {
                  "type": "bool",
                  "description": "Is the given table emtpy or not."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "table.ToNonSequential": {
              "name": "table.ToNonSequential",
              "description": "Converts the given sequential table into a non sequential table with the key being the value, and value being true",
              "parameters": [
                {
                  "type": "table",
                  "name": "tTable",
                  "description": "The table that will be converted."
                }
              ],
              "returns": [
                { "type": "table", "description": "The converted table." }
              ],
              "realm": "shared",
              "item": "function"
            },
            "table.CountNonSequential": {
              "name": "table.CountNonSequential",
              "description": "Iterates through the given non sequential table to calculate the amount of items",
              "parameters": [
                {
                  "type": "table",
                  "name": "tTable",
                  "description": "The table that will be converted."
                }
              ],
              "returns": [
                {
                  "type": "number",
                  "description": "iCount Amount of items in table."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "table.CountSequential": {
              "name": "table.CountSequential",
              "description": "Iterates through the given sequential table to calculate the amount of items",
              "parameters": [
                {
                  "type": "table",
                  "name": "tTable",
                  "description": "The table that will be converted."
                }
              ],
              "returns": [
                {
                  "type": "number",
                  "description": "iCount Amount of items in table."
                }
              ],
              "realm": "shared",
              "item": "function"
            }
          },
          "item": "category",
          "description": "Helpful functions for tables."
        },
        "mnsUtil": {
          "name": "mnsUtil",
          "pageType": "function",
          "subcategories": {
            "mnsUtil.GetPlayerIDs": {
              "name": "mnsUtil.GetPlayerIDs",
              "description": "Returns players IDs (SteamID, SteamID64 and MonoSuiteID. It also returns the player itself at 4th argument)",
              "parameters": [
                {
                  "type": "Player|string",
                  "name": "aPlayer",
                  "description": "The player to get the IDs from. Can also be a SteamID32 or SteamID64 or MonoSuite ID."
                },
                {
                  "type": "bool",
                  "name": "bDontSearchMonoSuiteData",
                  "description": "Set it to true if you don't want it to return the MonoSuiteID and the player (performance saving)"
                }
              ],
              "returns": [
                {
                  "type": "string|nil",
                  "description": "The player SteamID64, can be nil if aPlayer is invalid."
                },
                {
                  "type": "string|nil",
                  "description": "The player SteamID32, can be nil if aPlayer is invalid."
                },
                {
                  "type": "string|nil",
                  "description": "The player MonoSuiteID, can be nil if the aPlayer is invalid or doesn't exist."
                },
                {
                  "type": "Player|nil",
                  "description": "The player, can be nil if the player doesn't exist or if the second argument is true."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "mnsUtil.GetPlayersSortedByName": {
              "name": "mnsUtil.GetPlayersSortedByName",
              "description": "Returns players sorted by name",
              "parameters": [
                {
                  "type": "table|nil",
                  "name": "tPlayers",
                  "description": "(Optional)"
                }
              ],
              "returns": [
                {
                  "type": "table",
                  "description": "Table of alphabetically sorted players"
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "mnsUtil.GetPlayersSortedByImmunity": {
              "name": "mnsUtil.GetPlayersSortedByImmunity",
              "description": "Returns players sorted by rank (descending)",
              "parameters": [
                {
                  "type": "table|nil",
                  "name": "tPlayers",
                  "description": "(Optional)"
                }
              ],
              "returns": [
                {
                  "type": "table",
                  "description": "Table of players descending by rank"
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "mnsUtil.GetPlayersSortedByDistance": {
              "name": "mnsUtil.GetPlayersSortedByDistance",
              "description": "Returns players sorted by distance",
              "parameters": [
                { "type": "Vector", "name": "mPos", "description": "Position" },
                {
                  "type": "table|nil",
                  "name": "tPlayers",
                  "description": "(Optional)"
                }
              ],
              "returns": [
                {
                  "type": "table",
                  "description": "Table of players descending by rank"
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "mnsUtil.ToRole": {
              "name": "mnsUtil.ToRole",
              "description": "Attempts to convert a value into a Role meta",
              "parameters": [
                {
                  "type": "any",
                  "name": "aRole",
                  "description": "A role meta, A role ID or a Role alias."
                }
              ],
              "returns": [
                {
                  "type": "boolean",
                  "description": "Whether the string is a UUID or not."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "mnsUtil.IsUUID": {
              "name": "mnsUtil.IsUUID",
              "description": "Checks if a string is a UUID",
              "parameters": [
                {
                  "type": "string",
                  "name": "sUUID",
                  "description": "The potential UUID."
                }
              ],
              "returns": [
                {
                  "type": "boolean",
                  "description": "Whether the string is a UUID or not."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "mnsUtil.LazySort": {
              "name": "mnsUtil.LazySort",
              "description": "Simple alphabetical sorting algorithm to use with table.sort",
              "parameters": [
                {
                  "type": "string",
                  "name": "sA",
                  "description": "First string to compare."
                },
                {
                  "type": "string",
                  "name": "sB",
                  "description": "Second string to compare."
                }
              ],
              "returns": [
                {
                  "type": "boolean",
                  "description": "Return true if the first parameter needs to come first."
                }
              ],
              "realm": "shared",
              "item": "function"
            }
          },
          "item": "category"
        }
      },
      "item": "category"
    },
    "hooks": {
      "name": "Hooks",
      "pageType": "function",
      "subcategories": {
        "Kernel": {
          "name": "Kernel",
          "pageType": "function",
          "subcategories": {
            "MonoSuite.PlayerBooted": {
              "name": "MonoSuite.PlayerBooted",
              "description": "Called when the player's initial data has been received.",
              "parameters": [
                {
                  "type": "player",
                  "name": "pPlayer",
                  "description": "The player that has booted"
                },
                {
                  "type": "table",
                  "name": "tData",
                  "description": "The initial player's data"
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.LoadPlayer": {
              "name": "MonoSuite.LoadPlayer",
              "description": "Called when the player data are fetched, use this hook to setup stuff. Note: pPlayer:IsSuiteLoaded will return false during this hook",
              "parameters": [
                {
                  "type": "player",
                  "name": "pPlayer",
                  "description": "The player to set the stuff on"
                },
                {
                  "type": "table",
                  "name": "tData",
                  "description": "The player's data, such as roles, permissions, etc."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.PlayerLoaded": {
              "name": "MonoSuite.PlayerLoaded",
              "description": "Called when the client is fully loaded (with modules).",
              "parameters": [
                {
                  "type": "player",
                  "name": "pPlayer",
                  "description": "The player that has finished loading"
                },
                {
                  "type": "table",
                  "name": "tDataCopy",
                  "description": "A copy of the initial player's data."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Loaded": {
              "name": "MonoSuite.Loaded",
              "description": "Called when MonoSuite is fully ready (meaning all modules are ready to be used).",
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.ModulesReady": {
              "name": "MonoSuite.ModulesReady",
              "description": "Called when MonoSuite all modules are ready.",
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Ready": {
              "name": "MonoSuite.Ready",
              "description": "Called when MonoSuite is fully ready (meaning all modules are ready to be used).",
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.ModulesLoaded": {
              "name": "MonoSuite.ModulesLoaded",
              "description": "Called after the kernel resources have been handled.",
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.PluginsLoaded": {
              "name": "MonoSuite.PluginsLoaded",
              "description": "Called after the kernel resources have been handled.",
              "realm": "shared",
              "item": "function"
            }
          },
          "item": "category"
        },
        "Config": {
          "name": "Config",
          "pageType": "function",
          "subcategories": {
            "MonoSuite.Config.RegisterGroup": {
              "name": "MonoSuite.Config.RegisterGroup",
              "description": "Called when add-ons are required to register their config groups.",
              "parameters": [
                {
                  "type": "MonoSuite.Config",
                  "name": "MnsConfig",
                  "description": "The config module"
                }
              ],
              "realm": "server",
              "item": "function"
            }
          },
          "item": "category"
        },
        "GameLogger": {
          "name": "GameLogger",
          "pageType": "function",
          "subcategories": {
            "MonoSuite.GameLogger.Creation": {
              "name": "MonoSuite.GameLogger.Creation",
              "description": "Called when a log happened.",
              "parameters": [
                {
                  "type": "table",
                  "name": "tData",
                  "description": "A table containing the timestamp, category, message and participants."
                }
              ],
              "realm": "server",
              "item": "function"
            }
          },
          "item": "category"
        },
        "tPayload": {
          "name": "tPayload",
          "pageType": "function",
          "subcategories": {
            "MonoSuite.GameLogger.PostLogParsed": {
              "name": "MonoSuite.GameLogger.PostLogParsed",
              "description": "Used to manipulate and modify logs",
              "parameters": [
                {
                  "type": "table",
                  "name": "tPayload",
                  "description": "The log payload, tPayload.Message is the current log message Use MonoSuite.GameLogger.ColorMatchReplace to add colors to matched strings"
                }
              ],
              "item": "function"
            }
          },
          "item": "category"
        },
        "Player": {
          "name": "Player",
          "pageType": "function",
          "subcategories": {
            "MonoSuite.Blacklist": {
              "name": "MonoSuite.Blacklist",
              "description": "Called when a player gets blacklisted.",
              "parameters": [
                {
                  "type": "Player",
                  "name": "pPlayer",
                  "description": "The player who got blacklisted"
                },
                {
                  "type": "string",
                  "name": "sValue",
                  "description": "The blacklist type/value"
                },
                {
                  "type": "table",
                  "name": "tBlacklist",
                  "description": "The blacklist data"
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.BlacklistExpired": {
              "name": "MonoSuite.BlacklistExpired",
              "description": "Called when a player blacklist expire.",
              "parameters": [
                {
                  "type": "Player",
                  "name": "pPlayer",
                  "description": "The player who got blacklisted"
                },
                {
                  "type": "string",
                  "name": "sValue",
                  "description": "The blacklist type/value"
                },
                {
                  "type": "table",
                  "name": "tBlacklist",
                  "description": "The blacklist data"
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.PlayerTeleport": {
              "name": "MonoSuite.PlayerTeleport",
              "description": "Called when a player teleports.",
              "parameters": [
                {
                  "type": "pPlayer",
                  "name": "player",
                  "description": "The player that is being teleported."
                },
                {
                  "type": "vPosition",
                  "name": "vector",
                  "description": "The vector that will be set."
                },
                {
                  "type": "aAngle",
                  "name": "angle",
                  "description": "The eye angle that will be set."
                }
              ],
              "realm": "server",
              "item": "function"
            }
          },
          "item": "category"
        },
        "Role": {
          "name": "Role",
          "pageType": "function",
          "subcategories": {
            "MonoSuite.PermissionCached": {
              "name": "MonoSuite.PermissionCached",
              "description": "Called when a permission has been created.",
              "parameters": [
                {
                  "type": "tPermissionData",
                  "name": "mPermission",
                  "description": "The permission that has been created."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.PermissionUncached": {
              "name": "MonoSuite.PermissionUncached",
              "description": "Called when a permission has been deleted.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sNode",
                  "description": "The permission id that has been deleted."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.RoleCached": {
              "name": "MonoSuite.RoleCached",
              "description": "Called when a role has been cached.",
              "parameters": [
                {
                  "type": "tRoleData",
                  "name": "mRole",
                  "description": "The role that has been cached."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.RoleUncached": {
              "name": "MonoSuite.RoleUncached",
              "description": "Called when a role is uncached.",
              "parameters": [
                {
                  "type": "tRoleData",
                  "name": "mRole",
                  "description": "The role that is being uncached."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.PlayerCacheRoles": {
              "name": "MonoSuite.PlayerCacheRoles",
              "description": "Called when a players roles are set.",
              "parameters": [
                {
                  "type": "player",
                  "name": "pPlayer",
                  "description": "The player that the roles are being cached to."
                },
                {
                  "type": "aRole",
                  "name": "aRole",
                  "description": "The roles that the player will get."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.PlayerClearRolesCache": {
              "name": "MonoSuite.PlayerClearRolesCache",
              "description": "Called when a players roles have been updated.",
              "parameters": [
                {
                  "type": "player",
                  "name": "pPlayer",
                  "description": "The player that their roles will be updated for."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.PlayerHighestRoleChanged": {
              "name": "MonoSuite.PlayerHighestRoleChanged",
              "description": "Called when a players highest role has changed.",
              "parameters": [
                {
                  "type": "player",
                  "name": "pPlayer",
                  "description": "The that the highest role changed for."
                },
                {
                  "type": "SuiteRole",
                  "name": "mPreviousHighestRole",
                  "description": "The previous highest role of the player."
                },
                {
                  "type": "SuiteRole",
                  "name": "mCurrentHighestRole",
                  "description": "The new highest role of the player."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Sync.OnClientRolesSynced": {
              "name": "MonoSuite.Sync.OnClientRolesSynced",
              "description": "Called on the client when roles are synced, before roles are applied to the player.",
              "parameters": [
                {
                  "type": "table",
                  "name": "tEntityCache",
                  "description": "The player's monosuite object as an entity cache."
                }
              ],
              "realm": "client",
              "item": "function"
            },
            "MonoSuite.PlayerRoleAdded": {
              "name": "MonoSuite.PlayerRoleAdded",
              "description": "Called when a role is added to a player.",
              "parameters": [
                {
                  "type": "player",
                  "name": "pPlayer",
                  "description": "The player that received the role."
                },
                {
                  "type": "table",
                  "name": "tRole",
                  "description": "The role being added."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.PlayerRoleRemoved": {
              "name": "MonoSuite.PlayerRoleRemoved",
              "description": "Called when one of a players roles is removed.",
              "parameters": [
                {
                  "type": "player",
                  "name": "pPlayer",
                  "description": "The player that their role will be cleared from."
                },
                {
                  "type": "table",
                  "name": "tRole",
                  "description": "The role being removed."
                }
              ],
              "realm": "server",
              "item": "function"
            }
          },
          "item": "category"
        },
        "ServerNet": {
          "name": "ServerNet",
          "pageType": "function",
          "subcategories": {
            "MonoSuite.ServerNet": {
              "name": "MonoSuite.ServerNet",
              "description": "Called when a ServerNet message is received.",
              "parameters": [
                {
                  "type": "table",
                  "name": "tData",
                  "description": "Data received from ServerNet."
                },
                {
                  "type": "string",
                  "name": "sFrom",
                  "description": "ID of the server the data is from."
                }
              ],
              "realm": "server",
              "item": "function"
            }
          },
          "item": "category"
        },
        "Metrics": {
          "name": "Metrics",
          "pageType": "function",
          "subcategories": {
            "MonoSuite.Metrics.EnQueued": {
              "name": "MonoSuite.Metrics.EnQueued",
              "description": "Called when a metric is queued.",
              "parameters": [
                {
                  "type": "table",
                  "name": "tMeasurement",
                  "description": "A table containing the measurement."
                }
              ],
              "realm": "server",
              "item": "function"
            }
          },
          "item": "category"
        },
        "Moderation": {
          "name": "Moderation",
          "pageType": "function",
          "subcategories": {
            "MonoSuite.Moderation.PM": {
              "name": "MonoSuite.Moderation.PM",
              "description": "Called when a private message is sending",
              "parameters": [
                {
                  "type": "MnsUser",
                  "name": "uCaller",
                  "description": "The user that ran the command."
                },
                {
                  "type": "Player",
                  "name": "pTarget",
                  "description": "Recipient player."
                },
                {
                  "type": "string",
                  "name": "sMessage",
                  "description": "Message written by the caller."
                }
              ],
              "returns": [
                {
                  "type": "boolean|nil",
                  "description": "Return true to prevent the PM from being sent."
                }
              ],
              "realm": "server",
              "item": "function"
            }
          },
          "item": "category"
        },
        "Tickets": {
          "name": "Tickets",
          "pageType": "function",
          "subcategories": {
            "MonoSuite.Tickets.Created": {
              "name": "MonoSuite.Tickets.Created",
              "description": "Called when a Ticket has been created",
              "parameters": [
                {
                  "type": "TICKET",
                  "name": "mTicket",
                  "description": "The ticket object"
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Tickets.NewMessage": {
              "name": "MonoSuite.Tickets.NewMessage",
              "description": "Called when a Ticket received a message",
              "parameters": [
                {
                  "type": "TICKET",
                  "name": "mTicket",
                  "description": "The ticket object"
                },
                {
                  "type": "string",
                  "name": "sMessage",
                  "description": "The message"
                },
                {
                  "type": "MnsUser",
                  "name": "uAuthor",
                  "description": "The message author"
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Tickets.ChangedStatus": {
              "name": "MonoSuite.Tickets.ChangedStatus",
              "description": "Called when a Ticket has changed status",
              "parameters": [
                {
                  "type": "TICKET",
                  "name": "mTicket",
                  "description": "The ticket object"
                },
                {
                  "type": "number",
                  "name": "iStatus",
                  "description": "The new status"
                },
                {
                  "type": "MnsUser",
                  "name": "uAuthor",
                  "description": "The user who changed the ticket's status"
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Tickets.StaffToggled": {
              "name": "MonoSuite.Tickets.StaffToggled",
              "description": "Called when a Ticket gained or lost a staff",
              "parameters": [
                {
                  "type": "TICKET",
                  "name": "mTicket",
                  "description": "The ticket object"
                },
                {
                  "type": "MnsUser",
                  "name": "uStaff",
                  "description": "The user who joined/left the ticket"
                },
                {
                  "type": "boolean",
                  "name": "bLeft",
                  "description": "Wether they left or not"
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Tickets.ParticipantToggled": {
              "name": "MonoSuite.Tickets.ParticipantToggled",
              "description": "Called when a Ticket gained or lost a participant",
              "parameters": [
                {
                  "type": "TICKET",
                  "name": "mTicket",
                  "description": "The ticket object"
                },
                {
                  "type": "MnsUser",
                  "name": "uParticipant",
                  "description": "The user who joined/left the ticket"
                },
                {
                  "type": "boolean",
                  "name": "bLeft",
                  "description": "Wether they left or not"
                }
              ],
              "realm": "server",
              "item": "function"
            }
          },
          "item": "category"
        }
      },
      "item": "category"
    },
    "panels": {
      "name": "Panels",
      "pageType": "function",
      "subcategories": {},
      "item": "category"
    },
    "enums": {
      "name": "Enums",
      "pageType": "table",
      "subcategories": {},
      "item": "category"
    },
    "structs": {
      "name": "Structs",
      "pageType": "table",
      "subcategories": {},
      "item": "category"
    },
    "modules": {
      "name": "Modules",
      "pageType": "function",
      "subcategories": {
        "MonoSuite.Endpoint": {
          "name": "MonoSuite.Endpoint",
          "pageType": "function",
          "subcategories": {},
          "item": "category",
          "description": "Endpoint Page"
        },
        "MonoSuite.API.GraphQL": {
          "name": "MonoSuite.API.GraphQL",
          "pageType": "function",
          "subcategories": {
            "MonoSuite.API.GraphQL": {
              "name": "MonoSuite.API.GraphQL",
              "description": "This will create a new GraphQL request template.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sRequest",
                  "description": "The GraphQL request."
                }
              ],
              "returns": [
                {
                  "type": "MonoSuite.API.GraphQL",
                  "description": "The created GraphQL request template."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.API.GraphQL:Request": {
              "name": "MonoSuite.API.GraphQL:Request",
              "description": "Start preparing a GraphQL request.",
              "returns": [
                {
                  "type": "MonoSuite.API.GraphQL",
                  "description": "The GraphQL request to prepare."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.API.GraphQL:WithOnSuccess": {
              "name": "MonoSuite.API.GraphQL:WithOnSuccess",
              "description": "Add a callback function for request success.",
              "parameters": [
                {
                  "type": "function",
                  "name": "fOnRetry",
                  "description": "The callback function."
                }
              ],
              "returns": [
                {
                  "type": "MonoSuite.API.GraphQL",
                  "description": "The current GraphQL request."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.API.GraphQL:WithOnFailure": {
              "name": "MonoSuite.API.GraphQL:WithOnFailure",
              "description": "Add a callback function for request failure.",
              "parameters": [
                {
                  "type": "function",
                  "name": "fOnRetry",
                  "description": "The callback function."
                }
              ],
              "returns": [
                {
                  "type": "MonoSuite.API.GraphQL",
                  "description": "The current GraphQL request."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.API.GraphQL:WithOnCallback": {
              "name": "MonoSuite.API.GraphQL:WithOnCallback",
              "description": "Add a callback function for subscription messages.",
              "parameters": [
                {
                  "type": "function",
                  "name": "fOnRetry",
                  "description": "The callback function."
                }
              ],
              "returns": [
                {
                  "type": "MonoSuite.API.GraphQL",
                  "description": "The current GraphQL request."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.API.GraphQL:_EnableRequestState": {
              "name": "MonoSuite.API.GraphQL:_EnableRequestState",
              "returns": [
                {
                  "type": "MonoSuite.API.GraphQL",
                  "description": "The GraphQL request."
                }
              ],
              "realm": "shared",
              "internal": true,
              "item": "function"
            },
            "MonoSuite.API.GraphQL:_IsValidRequest": {
              "name": "MonoSuite.API.GraphQL:_IsValidRequest",
              "description": "This function checks if the HTTP method is valid.",
              "returns": [
                {
                  "type": "bool",
                  "description": "True if the HTTP method is valid."
                }
              ],
              "realm": "shared",
              "internal": true,
              "item": "function"
            },
            "MonoSuite.API.GraphQL:Run": {
              "name": "MonoSuite.API.GraphQL:Run",
              "description": "Run the GraphQL request.",
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.API.GraphQL:_RunHTTP": {
              "name": "MonoSuite.API.GraphQL:_RunHTTP",
              "description": "This runs the request through HTTP.",
              "parameters": [
                {
                  "type": "table",
                  "name": "tRequestData",
                  "description": "The request data."
                }
              ],
              "realm": "shared",
              "internal": true,
              "item": "function"
            },
            "MonoSuite.API.GraphQL:_RunWS": {
              "name": "MonoSuite.API.GraphQL:_RunWS",
              "description": "This runs the request through the WebSocket.",
              "parameters": [
                {
                  "type": "table",
                  "name": "tRequestData",
                  "description": "The request data."
                }
              ],
              "realm": "shared",
              "internal": true,
              "item": "function"
            },
            "MonoSuite.API.GraphQL:_StartSubscription": {
              "name": "MonoSuite.API.GraphQL:_StartSubscription",
              "description": "This starts the subscription on the WebSocket.",
              "parameters": [
                {
                  "type": "table",
                  "name": "tRequestData",
                  "description": "The request data."
                }
              ],
              "realm": "shared",
              "internal": true,
              "item": "function"
            },
            "MonoSuite.API.GraphQL:_OnSuccess": {
              "name": "MonoSuite.API.GraphQL:_OnSuccess",
              "description": "This function is called internally upon successful request from the API.",
              "parameters": [
                {
                  "type": "string|table",
                  "name": "aResponseBody",
                  "description": "The response from the API."
                },
                {
                  "type": "number|nil",
                  "name": "iStatusCode",
                  "description": "The HTTP status code."
                }
              ],
              "realm": "shared",
              "internal": true,
              "item": "function"
            },
            "MonoSuite.API.GraphQL:_WithHTTPMethod": {
              "name": "MonoSuite.API.GraphQL:_WithHTTPMethod",
              "description": "Set the HTTP method. This shouldn't be used at all.\nThis will force the request to go over HTTP.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sMethod",
                  "description": "The HTTP method to use."
                }
              ],
              "returns": [
                {
                  "type": "MonoSuite.API.GraphQL",
                  "description": "The GraphQL request."
                }
              ],
              "realm": "shared",
              "internal": true,
              "item": "function"
            },
            "MonoSuite.API.GraphQL:Post": {
              "name": "MonoSuite.API.GraphQL:Post",
              "description": "Set the HTTP method to POST. This shouldn't be used at all.\nThis will force the request to go over HTTP.",
              "returns": [
                {
                  "type": "MonoSuite.API.GraphQL",
                  "description": "The GraphQL request."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.API.GraphQL:Get": {
              "name": "MonoSuite.API.GraphQL:Get",
              "description": "Set the HTTP method to GET. This shouldn't be used at all.\nThis will force the request to go over HTTP.",
              "returns": [
                {
                  "type": "MonoSuite.API.GraphQL",
                  "description": "The GraphQL request."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.API.GraphQL:Put": {
              "name": "MonoSuite.API.GraphQL:Put",
              "description": "Set the HTTP method to PUT. This shouldn't be used at all.\nThis will force the request to go over HTTP.",
              "returns": [
                {
                  "type": "MonoSuite.API.GraphQL",
                  "description": "The GraphQL request."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.API.GraphQL:Delete": {
              "name": "MonoSuite.API.GraphQL:Delete",
              "description": "Set the HTTP method to DELETE. This shouldn't be used at all.\nThis will force the request to go over HTTP.",
              "returns": [
                {
                  "type": "MonoSuite.API.GraphQL",
                  "description": "The GraphQL request."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.API.GraphQL:WithAdditionalHeaders": {
              "name": "MonoSuite.API.GraphQL:WithAdditionalHeaders",
              "description": "Set additional headers.\nThis will force the request to go over HTTP.",
              "returns": [
                {
                  "type": "MonoSuite.API.GraphQL",
                  "description": "The current GraphQL request."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.API.GraphQL:AddVariables": {
              "name": "MonoSuite.API.GraphQL:AddVariables",
              "description": "Add a bunch of variables.",
              "parameters": [
                {
                  "type": "table",
                  "name": "tVariables",
                  "description": "The variable table."
                }
              ],
              "returns": [
                {
                  "type": "MonoSuite.API.GraphQL",
                  "description": "The current GraphQL request."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.API.GraphQL:AddVariable": {
              "name": "MonoSuite.API.GraphQL:AddVariable",
              "description": "Add a variable.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sVariableName",
                  "description": "The name of the variable."
                },
                {
                  "type": "any",
                  "name": "aData",
                  "description": "The value of the variable."
                }
              ],
              "returns": [
                {
                  "type": "MonoSuite.API.GraphQL",
                  "description": "The current GraphQL request."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.API.GraphQL:WithRetries": {
              "name": "MonoSuite.API.GraphQL:WithRetries",
              "description": "Set the max retry count.",
              "parameters": [
                {
                  "type": "number",
                  "name": "iMaxRetryCount",
                  "description": "The number of retries that should be made."
                }
              ],
              "returns": [
                {
                  "type": "MonoSuite.API.GraphQL",
                  "description": "The GraphQL request."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.API.GraphQL:WithOnRetry": {
              "name": "MonoSuite.API.GraphQL:WithOnRetry",
              "description": "Set a callback function for when the request is retried.",
              "parameters": [
                {
                  "type": "function",
                  "name": "fOnRetry",
                  "description": "The callback function."
                }
              ],
              "returns": [
                {
                  "type": "MonoSuite.API.GraphQL",
                  "description": "The GraphQL request."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.API.GraphQL:ForceHTTP": {
              "name": "MonoSuite.API.GraphQL:ForceHTTP",
              "description": "Force the request to go through HTTP.",
              "returns": [
                {
                  "type": "MonoSuite.API.GraphQL",
                  "description": "The GraphQL request."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.API.GraphQL:ForceWS": {
              "name": "MonoSuite.API.GraphQL:ForceWS",
              "description": "Force the request to go through the WebSocket.",
              "returns": [
                {
                  "type": "MonoSuite.API.GraphQL",
                  "description": "The GraphQL request."
                }
              ],
              "realm": "shared",
              "internal": true,
              "item": "function"
            },
            "MonoSuite.API.GraphQL:SetSubscription": {
              "name": "MonoSuite.API.GraphQL:SetSubscription",
              "description": "Set the request as a WebSocket subscription.\nThis will force the request to go through the WebSocket.",
              "returns": [
                {
                  "type": "MonoSuite.API.GraphQL",
                  "description": "The GraphQL request."
                }
              ],
              "realm": "shared",
              "internal": true,
              "item": "function"
            },
            "MonoSuite.API.GraphQL:_CheckIfSubscription": {
              "name": "MonoSuite.API.GraphQL:_CheckIfSubscription",
              "description": "This will check if the request is a subscription and apply the subscription type if it is.",
              "returns": [
                {
                  "type": "MonoSuite.API.GraphQL",
                  "description": "The GraphQL request."
                }
              ],
              "realm": "shared",
              "internal": true,
              "item": "function"
            },
            "MonoSuite.API.GraphQL:UnSubscribe": {
              "name": "MonoSuite.API.GraphQL:UnSubscribe",
              "description": "This will stops the subscription.",
              "returns": [
                {
                  "type": "MonoSuite.API.GraphQL",
                  "description": "The GraphQL request."
                }
              ],
              "realm": "shared",
              "internal": true,
              "item": "function"
            }
          },
          "item": "category"
        },
        "MonoSuite.Kernel": {
          "name": "MonoSuite.Kernel",
          "pageType": "function",
          "subcategories": {
            "GetInitialPlayerData": {
              "name": "GetInitialPlayerData",
              "description": "Get player data.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sSteamID",
                  "description": "The Steam ID."
                },
                {
                  "type": "function",
                  "name": "fCallback",
                  "description": "The callback with a success parameter."
                },
                {
                  "type": "function",
                  "name": "fFailureCallback",
                  "description": "The failure callback."
                }
              ],
              "realm": "server",
              "item": "function"
            }
          },
          "item": "category",
          "description": "Everything here is related to the kernel"
        },
        "MonoSuite.Exception": {
          "name": "MonoSuite.Exception",
          "pageType": "function",
          "subcategories": {
            "ThrowInvalidArgumentTypeException": {
              "name": "ThrowInvalidArgumentTypeException",
              "description": "Prints a exeption with the given error message, argument information, and a trace.",
              "parameters": [
                {
                  "type": "number",
                  "name": "iArgument",
                  "description": "The argument number that throws the error."
                },
                {
                  "type": "any",
                  "name": "aArgument",
                  "description": "The argument that was given."
                },
                {
                  "type": "number",
                  "name": "iStackLevel",
                  "description": "(Optional) The stacklevel on how deep the trace will go, will be 3 by default."
                }
              ],
              "returns": [{ "type": "bool", "description": "Always false." }],
              "realm": "shared",
              "item": "function"
            },
            "ThrowInvalidArgumentException": {
              "name": "ThrowInvalidArgumentException",
              "description": "Prints a exeption with the given error message, argument information, and a trace.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sError",
                  "description": "The error message."
                },
                {
                  "type": "number",
                  "name": "iArgument",
                  "description": "The argument number that throws the error."
                },
                {
                  "type": "any",
                  "name": "aArgument",
                  "description": "The argument that was given."
                },
                {
                  "type": "number",
                  "name": "iStackLevel",
                  "description": "(Optional) The stacklevel on how deep the trace will go, will be 2 by default."
                }
              ],
              "returns": [{ "type": "bool", "description": "Always false." }],
              "realm": "shared",
              "item": "function"
            },
            "ThrowInvalidArgumentFormatException": {
              "name": "ThrowInvalidArgumentFormatException",
              "description": "Prints a exeption with the given error message, argument format information, and a trace.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sError",
                  "description": "The error message."
                },
                {
                  "type": "number",
                  "name": "iArgument",
                  "description": "The argument number that throws the error."
                },
                {
                  "type": "any",
                  "name": "aArgument",
                  "description": "The argument that was given."
                },
                {
                  "type": "number",
                  "name": "iStackLevel",
                  "description": "(Optional) The stacklevel on how deep the trace will go, will be 2 by default."
                }
              ],
              "returns": [{ "type": "bool", "description": "Always false." }],
              "realm": "shared",
              "item": "function"
            },
            "ThrowInvalidActionException": {
              "name": "ThrowInvalidActionException",
              "description": "Prints a exeption with the given error message, and a trace.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sError",
                  "description": "The error message."
                },
                {
                  "type": "number",
                  "name": "iStackLevel",
                  "description": "(Optional) The stacklevel on how deep the trace will go, will be 2 by default."
                }
              ],
              "returns": [{ "type": "bool", "description": "Always false." }],
              "realm": "shared",
              "item": "function"
            }
          },
          "item": "category",
          "description": "This is exception file for monosuite."
        },
        "MonoSuite.Globals.API": {
          "name": "MonoSuite.Globals.API",
          "pageType": "function",
          "subcategories": {
            "UseDevAPI": {
              "name": "UseDevAPI",
              "description": "Return true if the staging API should be used.",
              "returns": [
                { "type": "bool", "description": "Should use dev API." }
              ],
              "realm": "shared",
              "item": "function"
            },
            "GetAPIBaseURL": {
              "name": "GetAPIBaseURL",
              "description": "Get the base API URL.",
              "returns": [
                { "type": "string", "description": "The base url of the API." }
              ],
              "realm": "shared",
              "item": "function"
            },
            "GetAPIBase": {
              "name": "GetAPIBase",
              "description": "Get the base API URL.",
              "returns": [
                { "type": "string", "description": "The base url of the API." }
              ],
              "realm": "shared",
              "item": "function"
            },
            "GetAPIURL": {
              "name": "GetAPIURL",
              "description": "Get the API URL.",
              "returns": [
                { "type": "string", "description": "The url of the API." }
              ],
              "realm": "shared",
              "item": "function"
            },
            "GetWSURI": {
              "name": "GetWSURI",
              "description": "Get the API WS URI.",
              "returns": [
                { "type": "string", "description": "The URI of the WS API." }
              ],
              "realm": "shared",
              "item": "function"
            }
          },
          "item": "category",
          "description": "This is the global file for the API."
        },
        "MonoSuite.Globals.Color": {
          "name": "MonoSuite.Globals.Color",
          "pageType": "function",
          "subcategories": {
            "GetColor": {
              "name": "GetColor",
              "description": "Fetch a color from the given string.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sColorName",
                  "description": "The name of the color you want to find."
                }
              ],
              "returns": [
                {
                  "type": "Color",
                  "description": "The color that has been found, or nil if no color was found."
                }
              ],
              "realm": "shared",
              "item": "function"
            }
          },
          "item": "category",
          "description": "This is the global file for colors."
        },
        "MonoSuite.Globals": {
          "name": "MonoSuite.Globals",
          "pageType": "function",
          "subcategories": {},
          "item": "category",
          "description": "This is the global file for monosuite."
        },
        "MonoSuite.FileLoader": {
          "name": "MonoSuite.FileLoader",
          "pageType": "function",
          "subcategories": {
            "LoadFolder": {
              "name": "LoadFolder",
              "description": "This will load the given folder path and ignore the given paths if given.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sFolderPath",
                  "description": "The folder path to include."
                },
                {
                  "type": "table",
                  "name": "tExcludedDirectories",
                  "description": "The folders to exclude."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "LoadFolderRecursive": {
              "name": "LoadFolderRecursive",
              "description": "This will load the given folder path recursivly and ignore the given paths if given.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sFolderPath",
                  "description": "The folder path to include."
                },
                {
                  "type": "table",
                  "name": "tExcludedDirectories",
                  "description": "The folders to exclude."
                }
              ],
              "realm": "shared",
              "item": "function"
            }
          },
          "item": "category",
          "description": "The base file for MonoSuite FileLoader."
        },
        "MonoSuite.Logger": {
          "name": "MonoSuite.Logger",
          "pageType": "function",
          "subcategories": {
            "MonoSuite.Logger.new": {
              "name": "MonoSuite.Logger.new",
              "description": "This will create a new logger.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sName",
                  "description": "The name of the logger."
                }
              ],
              "returns": [
                { "type": "tLoggerData", "description": "The logger meta." }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Logger:Log": {
              "name": "MonoSuite.Logger:Log",
              "description": "Prints a log message.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sMsg",
                  "description": "The logs message."
                }
              ],
              "returns": [
                { "type": "tLoggerData", "description": "The logger meta." }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Logger:Info": {
              "name": "MonoSuite.Logger:Info",
              "description": "Prints a log info message.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sMsg",
                  "description": "The logs message."
                }
              ],
              "returns": [
                { "type": "tLoggerData", "description": "The logger meta." }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Logger:Error": {
              "name": "MonoSuite.Logger:Error",
              "description": "Prints a log error message.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sMsg",
                  "description": "The logs message."
                }
              ],
              "returns": [
                { "type": "tLoggerData", "description": "The logger meta." }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Logger:Success": {
              "name": "MonoSuite.Logger:Success",
              "description": "Prints a log success message.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sMsg",
                  "description": "The logs message."
                }
              ],
              "returns": [
                { "type": "tLoggerData", "description": "The logger meta." }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Logger:Debug": {
              "name": "MonoSuite.Logger:Debug",
              "description": "Prints a log debug message.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sMsg",
                  "description": "The logs message."
                }
              ],
              "returns": [
                { "type": "tLoggerData", "description": "The logger meta." }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Logger:Warn": {
              "name": "MonoSuite.Logger:Warn",
              "description": "Prints a log warn message.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sMsg",
                  "description": "The logs message."
                }
              ],
              "returns": [
                { "type": "tLoggerData", "description": "The logger meta." }
              ],
              "realm": "shared",
              "item": "function"
            }
          },
          "item": "category",
          "description": "This is logger file for monosuite."
        },
        "MonoSuite.Command": {
          "name": "MonoSuite.Command",
          "pageType": "function",
          "subcategories": {
            "MonoSuite.Command:GetCommand": {
              "name": "MonoSuite.Command:GetCommand",
              "description": "Gets the command from the given command name, the command name will be\nlowercased during the search, this can be a alias of the command too.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sCommandName",
                  "description": "The command to search."
                }
              ],
              "returns": [
                {
                  "type": "table",
                  "description": "The found command; otherwise nil."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Command:RunAs": {
              "name": "MonoSuite.Command:RunAs",
              "description": "Execute the specified command as the specified user.\n\nAlso available as `MonoSuite.Command:Run(uCaller, sCommandName, tArgs, sPrefix)`.",
              "parameters": [
                {
                  "type": "MnsUser",
                  "name": "uCaller",
                  "description": "The user to execute the command as."
                },
                {
                  "type": "string",
                  "name": "sCommandName",
                  "description": "The command name."
                },
                {
                  "type": "table",
                  "name": "tArgs",
                  "description": "The command arguments."
                },
                {
                  "type": "string|nil",
                  "name": "sPrefix",
                  "description": "The command prefix."
                }
              ],
              "returns": [
                {
                  "type": "any",
                  "description": "The found command; otherwise nil."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Command:Run": {
              "name": "MonoSuite.Command:Run",
              "description": "Execute the specified command.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sCommandName",
                  "description": "The command name."
                },
                {
                  "type": "table",
                  "name": "tArgs",
                  "description": "The command arguments."
                },
                {
                  "type": "string|nil",
                  "name": "sPrefix",
                  "description": "The command prefix."
                }
              ],
              "realm": "client",
              "item": "function"
            }
          },
          "item": "category"
        },
        "MonoSuite.Config": {
          "name": "MonoSuite.Config",
          "pageType": "function",
          "subcategories": {
            "MonoSuite.Config:Set": {
              "name": "MonoSuite.Config:Set",
              "description": "This will add a config value and dispatch it to the other servers.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sFullKey",
                  "description": "The id to access the value later."
                },
                {
                  "type": "any",
                  "name": "aValue",
                  "description": "The value to save."
                },
                {
                  "type": "function",
                  "name": "fCallback",
                  "description": "The function called with an optional sError depending of key was successfully set"
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Config:Get": {
              "name": "MonoSuite.Config:Get",
              "description": "This will get a config value.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sFullKey",
                  "description": "The key name of config value."
                }
              ],
              "returns": [
                { "type": "any", "description": "The config value." }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Config:LoadAll": {
              "name": "MonoSuite.Config:LoadAll",
              "description": "This will load the full config from the API.",
              "parameters": [
                {
                  "type": "function",
                  "name": "fCallback",
                  "description": "The callback being called after a successful request."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Config:Subscribe": {
              "name": "MonoSuite.Config:Subscribe",
              "description": "Subscribe to value changes on given config values.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sFullKey",
                  "description": "The id of the config value to subscribe to."
                },
                {
                  "type": "function",
                  "name": "fCallback",
                  "description": "The callback being called after a value change is received."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Config:_PublishSubscriptions": {
              "name": "MonoSuite.Config:_PublishSubscriptions",
              "description": "Called when a config update is received over WebSocket.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sFullKey",
                  "description": "The id to access the value later."
                },
                {
                  "type": "any",
                  "name": "aValue",
                  "description": "The value to save."
                }
              ],
              "realm": "server",
              "internal": true,
              "item": "function"
            },
            "MonoSuite.Config:_UpdateServers": {
              "name": "MonoSuite.Config:_UpdateServers",
              "description": "This will add a config value and dispatch it to the other servers.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sFullKey",
                  "description": "The id to access the value later."
                },
                {
                  "type": "any",
                  "name": "aValue",
                  "description": "The value to save."
                },
                {
                  "type": "function",
                  "name": "fCallback",
                  "description": "The function called with an optional sError depending of key was successfully set"
                }
              ],
              "realm": "server",
              "internal": true,
              "item": "function"
            },
            "MonoSuite.Config:DefineGroup": {
              "name": "MonoSuite.Config:DefineGroup",
              "description": "This is used to form a MonoSuite.Config.SchemaGroup.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sName",
                  "description": "The name of the config group."
                },
                {
                  "type": "string",
                  "name": "sDescription",
                  "description": "The description of the config group."
                }
              ],
              "returns": [
                {
                  "type": "MonoSuite.Config.SchemaGroup",
                  "description": "The group object."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Config:DefineKey": {
              "name": "MonoSuite.Config:DefineKey",
              "description": "This is used to form a MonoSuite.Config.SchemaKey\nShould be used in MonoSuite.Config.SchemaGroup:WithKey only.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sName",
                  "description": "The name of the config group."
                }
              ],
              "returns": [
                {
                  "type": "MonoSuite.Config.SchemaKey",
                  "description": "The key object."
                }
              ],
              "realm": "server",
              "item": "function"
            }
          },
          "item": "category",
          "description": "Everything here is related to the config system"
        },
        "MonoSuite.Localisation": {
          "name": "MonoSuite.Localisation",
          "pageType": "function",
          "subcategories": {
            "MonoSuite.Localisation:AddPhrase": {
              "name": "MonoSuite.Localisation:AddPhrase",
              "description": "Adds a phrase to the localisation system, the phrase identifier can be used in other modules.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sLanguageIdentifier",
                  "description": "The language identifier (locale) i.e: en, fr, etc..."
                },
                {
                  "type": "string",
                  "name": "sPhraseIdentifier",
                  "description": "The phrase identifier, used in other modules to get the phrase."
                },
                {
                  "type": "string",
                  "name": "sPhrase",
                  "description": "A text, can contains variable names or color code, see THIS LINK to know how to use them."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Localisation:AddPhrases": {
              "name": "MonoSuite.Localisation:AddPhrases",
              "description": "Adds phrases to the localisation system.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sLanguageIdentifier",
                  "description": "The language identifier (locale) i.e: en, fr, etc..."
                },
                {
                  "type": "table",
                  "name": "tPhraseTable",
                  "description": "The phrase table, with the identifier as key, and value as phrase."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Localisation:GetPhrase": {
              "name": "MonoSuite.Localisation:GetPhrase",
              "description": "Process a phrase with in the current selected language and returns it.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sPhraseIdentifier",
                  "description": "The phrase identifier"
                },
                {
                  "type": "table",
                  "name": "tData",
                  "description": "A table with the fields to fill the phrase."
                }
              ],
              "returns": [
                {
                  "type": "table",
                  "description": "The phrase as a numerical table, contains text and color pack."
                },
                {
                  "type": "bool",
                  "description": "Whether the identifier was valid."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Localisation:GetPhraseAsString": {
              "name": "MonoSuite.Localisation:GetPhraseAsString",
              "description": "Process a phrase with in the current selected language and returns it.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sPhraseIdentifier",
                  "description": "The phrase identifier"
                },
                {
                  "type": "table",
                  "name": "tData",
                  "description": "A table with the fields to fill the phrase."
                }
              ],
              "returns": [
                { "type": "string", "description": "The phrase as a string." },
                {
                  "type": "bool",
                  "description": "Whether the identifier was valid."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Localisation:ProcessPhraseData": {
              "name": "MonoSuite.Localisation:ProcessPhraseData",
              "description": "Important function that format data so it can be safely networked and parsed by the parser.",
              "parameters": [
                {
                  "type": "table|nil",
                  "name": "tData",
                  "description": "The source table with the fields to fill the phrase."
                }
              ],
              "returns": [
                {
                  "type": "table|nil",
                  "description": "tData The processed table with the fields to fill the phrase."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Localisation:PhraseExists": {
              "name": "MonoSuite.Localisation:PhraseExists",
              "description": "Returns whether the phrase identifier exists.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sPhraseIdentifier",
                  "description": "The phrase identifier"
                }
              ],
              "returns": [
                {
                  "type": "boolean",
                  "description": "Whether the phrase identifier exists."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Localisation:GetTimeFormat": {
              "name": "MonoSuite.Localisation:GetTimeFormat",
              "description": "Gets the time format that should be used.",
              "returns": [
                { "type": "string", "description": "The time format." }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Localisation:GetTime": {
              "name": "MonoSuite.Localisation:GetTime",
              "description": "Gets the current time.",
              "returns": [
                {
                  "type": "string",
                  "description": "The current formatted time."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Localisation:GetDateFormat": {
              "name": "MonoSuite.Localisation:GetDateFormat",
              "description": "Gets the time format that should be used.",
              "returns": [
                { "type": "string", "description": "The time format." }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Localisation:GetDate": {
              "name": "MonoSuite.Localisation:GetDate",
              "description": "Gets the current date.",
              "returns": [
                {
                  "type": "string",
                  "description": "The current formatted date."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Localisation:GetFullFormat": {
              "name": "MonoSuite.Localisation:GetFullFormat",
              "description": "Gets the time and date format that should be used.",
              "returns": [
                { "type": "string", "description": "The time and date format." }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Localisation:GetCurrentTime": {
              "name": "MonoSuite.Localisation:GetCurrentTime",
              "description": "Gets the current time with date.",
              "returns": [
                {
                  "type": "string",
                  "description": "The current formatted time and date."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Localisation:LoadPhrases": {
              "name": "MonoSuite.Localisation:LoadPhrases",
              "description": "This will load the phrases from the API.",
              "parameters": [
                {
                  "type": "function|nil",
                  "name": "fCallback",
                  "description": "The callback being called after a successful request."
                }
              ],
              "returns": [
                {
                  "type": "MonoSuite.Localisation",
                  "description": "The Localisation module."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Localisation:ResetLanguage": {
              "name": "MonoSuite.Localisation:ResetLanguage",
              "description": "Resets the language.",
              "returns": [
                {
                  "type": "MonoSuite.Localisation",
                  "description": "The Localisation module."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Localisation:SetLanguage": {
              "name": "MonoSuite.Localisation:SetLanguage",
              "description": "Sets the language.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sLang",
                  "description": "The language to use."
                }
              ],
              "returns": [
                {
                  "type": "MonoSuite.Localisation",
                  "description": "The Localisation module."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Localisation:GetLanguage": {
              "name": "MonoSuite.Localisation:GetLanguage",
              "description": "Returns the selected language.",
              "returns": [
                { "type": "string", "description": "Selected language." }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Localisation:SetAutoLanguage": {
              "name": "MonoSuite.Localisation:SetAutoLanguage",
              "description": "Auto sets the language from the game's language.",
              "returns": [
                {
                  "type": "MonoSuite.Localisation",
                  "description": "The Localisation module."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Localisation:_SetAutoLang": {
              "name": "MonoSuite.Localisation:_SetAutoLang",
              "description": "Sets the auto language value.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sLang",
                  "description": "The game language."
                }
              ],
              "returns": [
                {
                  "type": "MonoSuite.Localisation",
                  "description": "The Localisation module."
                }
              ],
              "realm": "shared",
              "internal": true,
              "item": "function"
            }
          },
          "item": "category",
          "description": "Localisation system"
        },
        "MonoSuite.GameLogger": {
          "name": "MonoSuite.GameLogger",
          "pageType": "function",
          "subcategories": {
            "MonoSuite.GameLogger.Api:GetLoggingAPIBaseURL": {
              "name": "MonoSuite.GameLogger.Api:GetLoggingAPIBaseURL",
              "description": "Get the base Logging API URL.",
              "returns": [
                {
                  "type": "string",
                  "description": "The base url of the Logging API."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.GameLogger.Api:GetLoggingAPIBase": {
              "name": "MonoSuite.GameLogger.Api:GetLoggingAPIBase",
              "description": "Get the base Logging API URL.",
              "returns": [
                {
                  "type": "string",
                  "description": "The base url of the Logging API."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.GameLogger.Api:GetLoggingAPIURL": {
              "name": "MonoSuite.GameLogger.Api:GetLoggingAPIURL",
              "description": "Get the Logging API URL.",
              "returns": [
                {
                  "type": "string",
                  "description": "The url of the Logging API."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.GameLogger:LogWithMessage": {
              "name": "MonoSuite.GameLogger:LogWithMessage",
              "description": "Queue a log",
              "parameters": [
                {
                  "type": "string",
                  "name": "sCategory",
                  "description": "The category for the log."
                },
                {
                  "type": "string",
                  "name": "sMessage",
                  "description": "The log message."
                },
                {
                  "type": "table",
                  "name": "tParticipants",
                  "description": "Sequential list of participating players on the log message. Accepts MnsUsers/Players/Strings(MnsID/SteamID64)."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.GameLogger:Log": {
              "name": "MonoSuite.GameLogger:Log",
              "description": "Queue a localized log",
              "parameters": [
                {
                  "type": "string",
                  "name": "sCategory",
                  "description": "The category for the log."
                },
                {
                  "type": "string",
                  "name": "sPhraseID",
                  "description": "The localized phrase identifier."
                },
                {
                  "type": "table",
                  "name": "tPhraseData",
                  "description": "The localized phrase data."
                },
                {
                  "type": "table",
                  "name": "tParticipants",
                  "description": "Sequential list of participating players on the log message. Accepts MnsUsers/Players/Strings(MnsID/SteamID64)."
                }
              ],
              "realm": "server",
              "item": "function"
            }
          },
          "item": "category",
          "description": "The GameLogger module for MonoSuite."
        },
        "MonoSuite.Net": {
          "name": "MonoSuite.Net",
          "pageType": "function",
          "subcategories": {
            "MonoSuite.Net:Broadcast": {
              "name": "MonoSuite.Net:Broadcast",
              "description": "This will send a net message to all connected players.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sNetString",
                  "description": "The net message name."
                },
                {
                  "type": "table",
                  "name": "tData",
                  "description": "The data to send in the net message."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Net:_HandleBroadcast": {
              "name": "MonoSuite.Net:_HandleBroadcast",
              "realm": "shared",
              "internal": true,
              "item": "function"
            },
            "MonoSuite.Net:Register": {
              "name": "MonoSuite.Net:Register",
              "description": "This will register a new net message.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sNetString",
                  "description": "The net message name."
                },
                {
                  "type": "function",
                  "name": "fFunction",
                  "description": "Callback to run when net message is received."
                },
                {
                  "type": "number",
                  "name": "nTimeout",
                  "description": "The rate limit timeout that the sending player receives, this is optional and 0.25 by default."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Net:UnRegister": {
              "name": "MonoSuite.Net:UnRegister",
              "description": "This will unregister a net message.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sNetString",
                  "description": "The net message name."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Net:UnRegisterByPrefix": {
              "name": "MonoSuite.Net:UnRegisterByPrefix",
              "description": "This will unregister all net messages that starts with the provided prefix.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sPrefix",
                  "description": "The net message prefix."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Net:Notify": {
              "name": "MonoSuite.Net:Notify",
              "description": "This will send a net message to a specific player.",
              "parameters": [
                {
                  "type": "player",
                  "name": "pTarget",
                  "description": "The receipient of the net message."
                },
                {
                  "type": "string",
                  "name": "sNetString",
                  "description": "The net message name."
                },
                {
                  "type": "table",
                  "name": "tData",
                  "description": "The data to send in the net message."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Net:NotifyServer": {
              "name": "MonoSuite.Net:NotifyServer",
              "description": "Sends the new message to the server.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sNetString",
                  "description": "The net message name."
                },
                {
                  "type": "table",
                  "name": "tData",
                  "description": "The data to send in the net message."
                }
              ],
              "realm": "client",
              "item": "function"
            },
            "MonoSuite.Net:_HandleNotification": {
              "name": "MonoSuite.Net:_HandleNotification",
              "realm": "shared",
              "internal": true,
              "item": "function"
            },
            "MonoSuite.Net:Request": {
              "name": "MonoSuite.Net:Request",
              "description": "This will request information from a client.",
              "parameters": [
                {
                  "type": "player",
                  "name": "pTarget",
                  "description": "The receipient of the net message."
                },
                {
                  "type": "string",
                  "name": "sNetString",
                  "description": "The net message name."
                },
                {
                  "type": "table",
                  "name": "tData",
                  "description": "The data to send in the net message."
                },
                {
                  "type": "function",
                  "name": "fCallback",
                  "description": "Callback which will have the requested data."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Net:RequestServer": {
              "name": "MonoSuite.Net:RequestServer",
              "description": "This will request information from the server.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sNetString",
                  "description": "The net message name."
                },
                {
                  "type": "table",
                  "name": "tData",
                  "description": "The data to send in the net message."
                },
                {
                  "type": "function",
                  "name": "fCallback",
                  "description": "Callback which will have the requested data."
                }
              ],
              "realm": "client",
              "item": "function"
            },
            "MonoSuite.Net:_IsRateLimited": {
              "name": "MonoSuite.Net:_IsRateLimited",
              "description": "Checks if the player is being rate limited for the given net message.",
              "realm": "shared",
              "internal": true,
              "item": "function"
            },
            "MonoSuite.Net:_Exists": {
              "name": "MonoSuite.Net:_Exists",
              "description": "Checks if the given net message exists",
              "realm": "shared",
              "internal": true,
              "item": "function"
            },
            "MonoSuite.Net:_Answer": {
              "name": "MonoSuite.Net:_Answer",
              "realm": "shared",
              "internal": true,
              "item": "function"
            },
            "MonoSuite.Net:_HandleRequest": {
              "name": "MonoSuite.Net:_HandleRequest",
              "realm": "shared",
              "internal": true,
              "item": "function"
            },
            "MonoSuite.Net:_HandleResponse": {
              "name": "MonoSuite.Net:_HandleResponse",
              "realm": "shared",
              "internal": true,
              "item": "function"
            },
            "MonoSuite.Net:_Send": {
              "name": "MonoSuite.Net:_Send",
              "internal": true,
              "item": "function"
            }
          },
          "item": "category",
          "description": "The Net module for MonoSuite"
        },
        "MonoSuite.Notification": {
          "name": "MonoSuite.Notification",
          "pageType": "function",
          "subcategories": {
            "MonoSuite.Notification:SendChatNotification": {
              "name": "MonoSuite.Notification:SendChatNotification",
              "description": "This will add a chat notification with the text and colors to the local player.\n\nAlso available as `MonoSuite.Notification:SendChatNotification(pPlayer, ...)`.",
              "parameters": [
                {
                  "type": "player",
                  "name": "pPlayer",
                  "description": "This is the player that the notification will be displayed on, can be a table of players too."
                },
                {
                  "type": "any",
                  "name": "...",
                  "description": "This is the notification data, it can either be a color to switch the text color after that or a string for the text."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Notification:AddChatNotification": {
              "name": "MonoSuite.Notification:AddChatNotification",
              "description": "This will add a chat notification with the text and colors to the localplayer player.",
              "parameters": [
                {
                  "type": "any",
                  "name": "...",
                  "description": "This is the notification data, it can either be a color to switch the text color after that or a string for the text."
                }
              ],
              "realm": "client",
              "item": "function"
            },
            "MonoSuite.Notification:SendPhraseChatNotification": {
              "name": "MonoSuite.Notification:SendPhraseChatNotification",
              "description": "This will add a phrased chat notification to the given player.\n\nAlso available as `MonoSuite.Notification:AddPhraseChatNotification(aPlayer, sPhraseID, tData, bPrintToConsole)`.",
              "parameters": [
                {
                  "type": "Player|table|nil",
                  "name": "aPlayer",
                  "description": "The player that you want the chat notification to go to, can be a table too or nil for broadcast."
                },
                {
                  "type": "string",
                  "name": "sPhraseIdentifier",
                  "description": "The phrase that will be displayed on the client."
                },
                {
                  "type": "table|nil",
                  "name": "tData",
                  "description": "(Optional) The table with the data for the phrase."
                },
                {
                  "type": "bool|nil",
                  "name": "bPrintToConsole",
                  "description": "(Optional) Print to console if set to true."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Notification:BroadcastPhraseChatNotification": {
              "name": "MonoSuite.Notification:BroadcastPhraseChatNotification",
              "description": "This will automatically broadcast a phrased chat notification.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sPhraseIdentifier",
                  "description": "The phrase that will be displayed on the client."
                },
                {
                  "type": "table|nil",
                  "name": "tData",
                  "description": "(Optional) The table with the data for the phrase."
                },
                {
                  "type": "string|nil",
                  "name": "sPermission",
                  "description": "(Optional) The permission to broadcast to."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Notification:AddPhraseChatNotification": {
              "name": "MonoSuite.Notification:AddPhraseChatNotification",
              "description": "This will add a phrased chat notification to the local player.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sPhraseIdentifier",
                  "description": "The phrase that will be displayed on the client."
                },
                {
                  "type": "table",
                  "name": "tData",
                  "description": "The table with the data for the phrase."
                }
              ],
              "realm": "client",
              "item": "function"
            },
            "MonoSuite.Notification:PrintChatPhrase": {
              "name": "MonoSuite.Notification:PrintChatPhrase",
              "description": "Process a phrase with in the current selected language and prints it.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sPhraseIdentifier",
                  "description": "The phrase identifier"
                },
                {
                  "type": "table",
                  "name": "tData",
                  "description": "A table with the fields to fill the phrase."
                }
              ],
              "realm": "client",
              "item": "function"
            },
            "MonoSuite.Notification:PrintPhrase": {
              "name": "MonoSuite.Notification:PrintPhrase",
              "description": "Process a phrase with in the current selected language and prints it.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sPhraseIdentifier",
                  "description": "The phrase identifier"
                },
                {
                  "type": "table",
                  "name": "tData",
                  "description": "A table with the fields to fill the phrase."
                }
              ],
              "realm": "shared",
              "item": "function"
            }
          },
          "item": "category",
          "description": "Chat Notification"
        },
        "MonoSuite.Player": {
          "name": "MonoSuite.Player",
          "pageType": "function",
          "subcategories": {
            "MonoSuite.Player:GetProperUserRequest": {
              "name": "MonoSuite.Player:GetProperUserRequest",
              "description": "Return the correct GraphQL request to use (permission-wise) in order to get UserData.",
              "returns": [
                {
                  "type": "MonoSuite.API.GraphQL",
                  "description": "The GraphQL request."
                }
              ],
              "realm": "client",
              "internal": true,
              "item": "function"
            },
            "MonoSuite.Player:GetBlacklists": {
              "name": "MonoSuite.Player:GetBlacklists",
              "description": "Get all the user blacklists.",
              "parameters": [
                {
                  "type": "player",
                  "name": "uUser",
                  "description": "The user."
                }
              ],
              "returns": [
                { "type": "table|nil", "description": "Blacklists." }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Player:HasActiveBlacklist": {
              "name": "MonoSuite.Player:HasActiveBlacklist",
              "description": "Check if the user has active blacklist.",
              "parameters": [
                {
                  "type": "player",
                  "name": "uUser",
                  "description": "The user."
                }
              ],
              "returns": [
                { "type": "bool|nil", "description": "Has active blacklists." }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Player:IsBlacklisted": {
              "name": "MonoSuite.Player:IsBlacklisted",
              "description": "Check if the user is blacklisted.",
              "parameters": [
                {
                  "type": "player",
                  "name": "uUser",
                  "description": "The user."
                },
                {
                  "type": "string",
                  "name": "sValue",
                  "description": "Blacklist type/ID."
                }
              ],
              "returns": [
                { "type": "bool|nil", "description": "Is blacklisted." },
                { "type": "table|nil", "description": "Blacklist data." }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Player:GetActiveBan": {
              "name": "MonoSuite.Player:GetActiveBan",
              "description": "Fetch an active ban for the player if any.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sSteamID",
                  "description": "The player's SteamID64."
                },
                {
                  "type": "string|nil",
                  "name": "sOwnerSteamID",
                  "description": "The owner's SteamID64 (can also be fCallback)."
                },
                {
                  "type": "function|nil",
                  "name": "fCallback",
                  "description": "The callback function with a success parameter and an error indicator: fCallback(tData, bError)."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Player:Ban": {
              "name": "MonoSuite.Player:Ban",
              "description": "Ban the given player.",
              "parameters": [
                {
                  "type": "player",
                  "name": "pAdmin",
                  "description": "The issuer."
                },
                {
                  "type": "player",
                  "name": "pTarget",
                  "description": "The target player."
                },
                {
                  "type": "string|nil",
                  "name": "sReason",
                  "description": "The reason."
                },
                {
                  "type": "number",
                  "name": "iMinutes",
                  "description": "The length."
                },
                {
                  "type": "boolean|nil",
                  "name": "bGroupWide",
                  "description": "Is server group wide ban."
                },
                {
                  "type": "boolean|nil",
                  "name": "bShouldKick",
                  "description": "Should kick the user on ban."
                },
                {
                  "type": "function",
                  "name": "fCallback",
                  "description": "The callback function."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Player:EditBan": {
              "name": "MonoSuite.Player:EditBan",
              "description": "Edit the given ban.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sID",
                  "description": "The ban ID."
                },
                {
                  "type": "player",
                  "name": "uAdmin",
                  "description": "The issuer."
                },
                {
                  "type": "player|nil",
                  "name": "uTarget",
                  "description": "The target player."
                },
                {
                  "type": "string|nil",
                  "name": "sReason",
                  "description": "The reason."
                },
                {
                  "type": "number|nil",
                  "name": "iMinutes",
                  "description": "The length."
                },
                {
                  "type": "boolean|nil",
                  "name": "bGroupWide",
                  "description": "Is server group wide ban."
                },
                {
                  "type": "function|nil",
                  "name": "fCallback",
                  "description": "The callback function."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Player:UnBan": {
              "name": "MonoSuite.Player:UnBan",
              "description": "UnBan the given player.",
              "parameters": [
                {
                  "type": "MnsUser",
                  "name": "uTarget",
                  "description": "The user to unban."
                },
                {
                  "type": "MnsUser",
                  "name": "uAdmin",
                  "description": "The admin who's unbanning."
                },
                {
                  "type": "string",
                  "name": "sReason",
                  "description": "The reason for the unbanning."
                },
                {
                  "type": "function",
                  "name": "fCallback",
                  "description": "The callback function."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Player:PerformBanKickFromData": {
              "name": "MonoSuite.Player:PerformBanKickFromData",
              "description": "Perform the kick from ban data.",
              "parameters": [
                {
                  "type": "table",
                  "name": "tData",
                  "description": "The ban data."
                },
                {
                  "type": "MnsUser|nil",
                  "name": "uAdmin",
                  "description": "The ban issuer (Optional)."
                },
                {
                  "type": "MnsUser|nil",
                  "name": "uTarget",
                  "description": "The banned player (Optional)."
                }
              ],
              "realm": "server",
              "internal": true,
              "item": "function"
            },
            "MonoSuite.Player:BanFromModerationEvent": {
              "name": "MonoSuite.Player:BanFromModerationEvent",
              "description": "Perform ban from moderationEvent.",
              "parameters": [
                {
                  "type": "table",
                  "name": "tData",
                  "description": "The moderationEvent data."
                }
              ],
              "realm": "server",
              "internal": true,
              "item": "function"
            },
            "MonoSuite.Player:Blacklist": {
              "name": "MonoSuite.Player:Blacklist",
              "description": "Blacklist something to someone.",
              "parameters": [
                {
                  "type": "MnsUser",
                  "name": "uTarget",
                  "description": "The target."
                },
                {
                  "type": "MnsUser",
                  "name": "uAdmin",
                  "description": "The issuer."
                },
                {
                  "type": "string",
                  "name": "sValue",
                  "description": "Blacklist type/ID."
                },
                {
                  "type": "number",
                  "name": "iLength",
                  "description": "The length."
                },
                {
                  "type": "string",
                  "name": "sReason",
                  "description": "The reason."
                },
                {
                  "type": "function|nil",
                  "name": "fCallback",
                  "description": "The callback function."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Player:_Blacklist": {
              "name": "MonoSuite.Player:_Blacklist",
              "description": "Perform Blacklist logic for online players.",
              "parameters": [
                {
                  "type": "player",
                  "name": "pPlayer",
                  "description": "The target."
                },
                {
                  "type": "string",
                  "name": "sUserID",
                  "description": "The MonoSuite user ID."
                },
                {
                  "type": "table",
                  "name": "tBlacklist",
                  "description": "The blacklist data."
                }
              ],
              "realm": "server",
              "internal": true,
              "item": "function"
            },
            "MonoSuite.Player:ExpireBlacklist": {
              "name": "MonoSuite.Player:ExpireBlacklist",
              "description": "Expire someone's blacklist.",
              "parameters": [
                {
                  "type": "MnsUser",
                  "name": "uTarget",
                  "description": "The target."
                },
                {
                  "type": "MnsUser",
                  "name": "uAdmin",
                  "description": "The issuer."
                },
                {
                  "type": "string",
                  "name": "sValue",
                  "description": "Blacklist type/ID."
                },
                {
                  "type": "function|nil",
                  "name": "fCallback",
                  "description": "The callback function."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Player:_ExpireBlacklist": {
              "name": "MonoSuite.Player:_ExpireBlacklist",
              "description": "Perform Blacklist expiration logic for online players.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sID",
                  "description": "Blacklist internal ID."
                },
                {
                  "type": "string",
                  "name": "sUserID",
                  "description": "The MonoSuite user ID."
                },
                {
                  "type": "Player",
                  "name": "pPlayer",
                  "description": "The player."
                }
              ],
              "realm": "server",
              "internal": true,
              "item": "function"
            },
            "MonoSuite.Player:_ExpireBlacklistCall": {
              "name": "MonoSuite.Player:_ExpireBlacklistCall",
              "description": "Expire blacklist by ID to the API.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sID",
                  "description": "Blacklist internal ID."
                },
                {
                  "type": "function|nil",
                  "name": "fCallback",
                  "description": "The callback function."
                }
              ],
              "realm": "server",
              "internal": true,
              "item": "function"
            },
            "MonoSuite.Player:SendBlacklistData": {
              "name": "MonoSuite.Player:SendBlacklistData",
              "description": "Send blacklist data to clients.",
              "parameters": [
                {
                  "type": "Player|nil",
                  "name": "pPlayer",
                  "description": "Player to sent the data to."
                }
              ],
              "returns": [
                {
                  "type": "MonoSuite.Player",
                  "description": "The Player meta."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Player:Kick": {
              "name": "MonoSuite.Player:Kick",
              "description": "Kick the given player.",
              "parameters": [
                {
                  "type": "MnsUser",
                  "name": "uIssuer",
                  "description": "The kick issuer."
                },
                {
                  "type": "player",
                  "name": "pTarget",
                  "description": "The target."
                },
                {
                  "type": "string",
                  "name": "sReason",
                  "description": "The reason shown to the player."
                },
                {
                  "type": "string|nil",
                  "name": "sAdminReason",
                  "description": "The reason shown to the administrative side."
                },
                {
                  "type": "function|nil",
                  "name": "fCallback",
                  "description": "The optional callback function for the API response."
                }
              ],
              "returns": [
                {
                  "type": "boolean|nil",
                  "description": "Return whether the kick is sending to the API (valid user)."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Player:KickFromModerationEvent": {
              "name": "MonoSuite.Player:KickFromModerationEvent",
              "description": "Perform kick from moderationEvent.",
              "parameters": [
                {
                  "type": "table",
                  "name": "tData",
                  "description": "The moderationEvent data."
                }
              ],
              "realm": "server",
              "internal": true,
              "item": "function"
            },
            "MonoSuite.Player:Get": {
              "name": "MonoSuite.Player:Get",
              "description": "Get player data (at least one type of ID is required).",
              "parameters": [
                {
                  "type": "string|nil",
                  "name": "sMnsId",
                  "description": "The MonoSuite user ID."
                },
                {
                  "type": "string|nil",
                  "name": "sSteamID",
                  "description": "The SteamID64."
                },
                {
                  "type": "function",
                  "name": "fCallback",
                  "description": "The callback with the data as argument or nil if not found."
                }
              ],
              "realm": "shared",
              "item": "function"
            }
          },
          "item": "category",
          "description": "The server administrative player file for MonoSuite."
        },
        "MonoSuite.Plugin": {
          "name": "MonoSuite.Plugin",
          "pageType": "function",
          "subcategories": {
            "MonoSuite.Plugin:Init": {
              "name": "MonoSuite.Plugin:Init",
              "realm": "shared",
              "internal": true,
              "item": "function"
            },
            "MonoSuite.Plugin:Remove": {
              "name": "MonoSuite.Plugin:Remove",
              "realm": "shared",
              "internal": true,
              "item": "function"
            },
            "MonoSuite.Plugin:RegisterPlugin": {
              "name": "MonoSuite.Plugin:RegisterPlugin",
              "description": "Register a new plugin.\n\nThis should be used while creating a plugin.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sName",
                  "description": "Name of the plugin."
                },
                {
                  "type": "string|nil",
                  "name": "sDescription",
                  "description": "Description of the plugin (Optional)."
                }
              ],
              "returns": [
                { "type": "table", "description": "Plugin meta table." }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Plugin:GetPluginsData": {
              "name": "MonoSuite.Plugin:GetPluginsData",
              "description": "Returns the plugins table.",
              "returns": [{ "type": "table", "description": "Plugins table." }],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Plugin:GetPluginData": {
              "name": "MonoSuite.Plugin:GetPluginData",
              "parameters": [
                {
                  "type": "sPluginName",
                  "name": "sName",
                  "description": "Name of the plugin. Returns the specified plugin meta table."
                },
                {
                  "type": "string",
                  "name": "sName",
                  "description": "Name of the plugin."
                }
              ],
              "returns": [
                {
                  "type": "table|nil",
                  "description": "The plugin meta table if it exists."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Plugin:_RemovePlugins": {
              "name": "MonoSuite.Plugin:_RemovePlugins",
              "description": "Remove all enabled plugins.\n\nThis is used during MonoSuite reboot process.",
              "realm": "shared",
              "internal": true,
              "item": "function"
            },
            "MonoSuite.Plugin:_SaveDisabledPluginsList": {
              "name": "MonoSuite.Plugin:_SaveDisabledPluginsList",
              "description": "Saves the list of disabled plugins.",
              "realm": "server",
              "internal": true,
              "item": "function"
            },
            "MonoSuite.Plugin:ChangePluginState": {
              "name": "MonoSuite.Plugin:ChangePluginState",
              "description": "Change and save a plugin's state.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sPluginName",
                  "description": "Name of the plugin."
                },
                {
                  "type": "bool",
                  "name": "bState",
                  "description": "`true` to enable the plugin. `false` to disable the plugin."
                }
              ],
              "returns": [
                {
                  "type": "string|nil",
                  "description": "Plugin name if found."
                },
                {
                  "type": "bool|nil",
                  "description": "Plugin state has changed."
                }
              ],
              "realm": "server",
              "item": "function"
            }
          },
          "item": "category",
          "description": "The plugin module allows for registering/loading/managing of plugins."
        },
        "MonoSuite.Role": {
          "name": "MonoSuite.Role",
          "pageType": "function",
          "subcategories": {
            "MonoSuite.Role.SuitePermission.new": {
              "name": "MonoSuite.Role.SuitePermission.new",
              "description": "This will create a new permission and add it to the permission cache.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sNode",
                  "description": "The node of the permission."
                },
                {
                  "type": "string",
                  "name": "sName",
                  "description": "The name of the permission."
                },
                {
                  "type": "string",
                  "name": "sID",
                  "description": "The id of the permission."
                }
              ],
              "returns": [
                {
                  "type": "tPermissionData",
                  "description": "The permission meta."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Role.SuitePermission:GetNode": {
              "name": "MonoSuite.Role.SuitePermission:GetNode",
              "description": "This will return the permission node.",
              "returns": [
                {
                  "type": "string",
                  "description": "The unique node of the permission."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Role.SuitePermission:GetName": {
              "name": "MonoSuite.Role.SuitePermission:GetName",
              "description": "This will return the permission name.",
              "returns": [
                {
                  "type": "string",
                  "description": "The name of the permission."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Role.SuitePermission:GetID": {
              "name": "MonoSuite.Role.SuitePermission:GetID",
              "description": "This will return the permission UUID.",
              "returns": [
                {
                  "type": "string",
                  "description": "The UUID of the permission."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Role.SuitePermission:GetDescription": {
              "name": "MonoSuite.Role.SuitePermission:GetDescription",
              "description": "This will get the permission description.",
              "returns": [
                {
                  "type": "string",
                  "description": "The description of the permission."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Role.SuitePermission:WithDescription": {
              "name": "MonoSuite.Role.SuitePermission:WithDescription",
              "description": "This will set the given description of the permission.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sDescription",
                  "description": "The description for the permission."
                }
              ],
              "returns": [
                {
                  "type": "tPermissionData",
                  "description": "The permission meta."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Role.SuitePermission:WithCategory": {
              "name": "MonoSuite.Role.SuitePermission:WithCategory",
              "description": "This will add the given category.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sCategory",
                  "description": "The category you want to add."
                }
              ],
              "returns": [
                {
                  "type": "tPermissionData",
                  "description": "The permission meta."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Role:CachePermission": {
              "name": "MonoSuite.Role:CachePermission",
              "description": "This will add the permission with the given node to the cache.",
              "parameters": [
                {
                  "type": "tPermissionData",
                  "name": "tPermissionData",
                  "description": "This is the permission that'll be added to the cache."
                },
                {
                  "type": "string",
                  "name": "sNode",
                  "description": "This is the node that the permission will be able to be accessed with."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Role:UncachePermission": {
              "name": "MonoSuite.Role:UncachePermission",
              "description": "This will remove the permission with the given node.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sNode",
                  "description": "The permission node."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Role:GetPermissions": {
              "name": "MonoSuite.Role:GetPermissions",
              "description": "This will return all permissions with a non sequential table.",
              "returns": [
                { "type": "table", "description": "All the Permissions." }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Role:GetPermission": {
              "name": "MonoSuite.Role:GetPermission",
              "description": "This will return the permission with the given id.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sNode",
                  "description": "The permission id that is being searched for."
                }
              ],
              "returns": [
                {
                  "type": "tPermissionData",
                  "description": "The found permission."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Role:PermissionExists": {
              "name": "MonoSuite.Role:PermissionExists",
              "description": "This will return if the permission with the given id exists.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sNode",
                  "description": "The permission that is being searched for."
                }
              ],
              "returns": [
                { "type": "bool", "description": "Does the permission exist?" }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Role:GetPlayersByPermissions": {
              "name": "MonoSuite.Role:GetPlayersByPermissions",
              "description": "This will return all players with the given permission(s).",
              "parameters": [
                {
                  "type": "string",
                  "name": "sPermission(s)",
                  "description": "The permission(s) to look for."
                }
              ],
              "returns": [
                {
                  "type": "table",
                  "description": "Players with the permission(s)."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Role:GetPlayersByPermission": {
              "name": "MonoSuite.Role:GetPlayersByPermission",
              "description": "This will return all players with the given permission.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sNode",
                  "description": "The permission to look for."
                }
              ],
              "returns": [
                {
                  "type": "table",
                  "description": "Players with the permission."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Role:FetchRoles": {
              "name": "MonoSuite.Role:FetchRoles",
              "description": "Fetch the roles from the API and caches them afterwards.",
              "parameters": [
                {
                  "type": "function",
                  "name": "fCallback",
                  "description": "fCallback(bSuccess) The function to call when the roles are fetched."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Role:GetRoles": {
              "name": "MonoSuite.Role:GetRoles",
              "description": "Returns all roles with a non sequential table.",
              "returns": [{ "type": "table", "description": "All the roles." }],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Role:GetRoleByID": {
              "name": "MonoSuite.Role:GetRoleByID",
              "description": "Returns the role object of the given role ID.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sID",
                  "description": "The role id that is being searched for"
                }
              ],
              "returns": [
                {
                  "type": "mRole",
                  "description": "The found role, or nil if it doesn't exist."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Role:RoleExistsByID": {
              "name": "MonoSuite.Role:RoleExistsByID",
              "description": "Check if the role exists from its ID.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sID",
                  "description": "The role id that is being searched for."
                }
              ],
              "returns": [
                {
                  "type": "bool",
                  "description": "True if the exists, false otherwise."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Role:GetRole": {
              "name": "MonoSuite.Role:GetRole",
              "description": "Gets the given role object from the given role alias.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sAlias",
                  "description": "The role to find."
                }
              ],
              "returns": [
                {
                  "type": "mRole",
                  "description": "The found role, or nil if it doesn't exist."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Role:RoleExists": {
              "name": "MonoSuite.Role:RoleExists",
              "description": "Checks if the given role from the given role alias exists.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sAlias",
                  "description": "The role alias to check."
                }
              ],
              "returns": [
                {
                  "type": "bool",
                  "description": "True if it exists, false otherwise."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Role:GetDefaultRole": {
              "name": "MonoSuite.Role:GetDefaultRole",
              "description": "Returns the player role (the default role that everyone has with 0 immunity)",
              "returns": [
                { "type": "mRole", "description": "The role with 0 immunity." }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Role:FindRole": {
              "name": "MonoSuite.Role:FindRole",
              "description": "Find a role using a partial name",
              "parameters": [
                {
                  "type": "string",
                  "name": "sName",
                  "description": "The name to search with."
                }
              ],
              "returns": [
                {
                  "type": "mRole",
                  "description": "The found role, or nil if the role wasn't found."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Role:_CacheRole": {
              "name": "MonoSuite.Role:_CacheRole",
              "description": "This will add a role with the given id to the cache, the aliases of the role\nare mapped to point to the given role. This is internally and should not be\ncalled manually.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sID",
                  "description": "This is the id that the role will be able to be accessed from."
                },
                {
                  "type": "tRoleData",
                  "name": "mRole",
                  "description": "This is the role that'll be added to the cache."
                }
              ],
              "realm": "shared",
              "internal": true,
              "item": "function"
            },
            "MonoSuite.Role:_UncacheRole": {
              "name": "MonoSuite.Role:_UncacheRole",
              "description": "This will remove the role with the given id from the cache, the aliases of\nthe role cleared as well. This is internally and should not be called\nmanually.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sID",
                  "description": "This is the role id from the role that'll be removed."
                }
              ],
              "realm": "shared",
              "internal": true,
              "item": "function"
            },
            "MonoSuite.Role:_RefreshPlayersRoles": {
              "name": "MonoSuite.Role:_RefreshPlayersRoles",
              "description": "Refresh roles on all players",
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Role:CreatePermission": {
              "name": "MonoSuite.Role:CreatePermission",
              "description": "Create a permission.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sNode",
                  "description": "The permission node."
                },
                {
                  "type": "string",
                  "name": "sName",
                  "description": "The permission name."
                },
                {
                  "type": "string",
                  "name": "sDescription",
                  "description": "The description."
                },
                {
                  "type": "function|nil",
                  "name": "fCallback",
                  "description": "The callback with a success parameter."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Role:DeletePermission": {
              "name": "MonoSuite.Role:DeletePermission",
              "description": "Delete a permission.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sNode",
                  "description": "The permission node."
                },
                {
                  "type": "function|nil",
                  "name": "fCallback",
                  "description": "The callback with a success parameter."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Role:CreatePermissionFromCommand": {
              "name": "MonoSuite.Role:CreatePermissionFromCommand",
              "description": "Create a permission from a command.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sNode",
                  "description": "The permission node."
                },
                {
                  "type": "string",
                  "name": "mCommand",
                  "description": "The permission name."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Role:AddRoleToPlayer": {
              "name": "MonoSuite.Role:AddRoleToPlayer",
              "description": "Add a role to the player",
              "parameters": [
                {
                  "type": "MnsUser|Player",
                  "name": "aTarget",
                  "description": "The user/player to add a role to."
                },
                {
                  "type": "MnsUser|Player",
                  "name": "aAdmin",
                  "description": "The user/player that is adding the role."
                },
                {
                  "type": "SuiteRole|string",
                  "name": "aRole",
                  "description": "The role id or object."
                },
                {
                  "type": "function|nil",
                  "name": "fCallback",
                  "description": "fCallback(bSuccess)"
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Role:RemoveRoleFromPlayer": {
              "name": "MonoSuite.Role:RemoveRoleFromPlayer",
              "description": "Remove the a role from the player",
              "parameters": [
                {
                  "type": "MnsUser|Player",
                  "name": "aTarget",
                  "description": "The user/player to remove a role from."
                },
                {
                  "type": "MnsUser|Player",
                  "name": "aAdmin",
                  "description": "The user/player that is removing the role."
                },
                {
                  "type": "SuiteRole|string",
                  "name": "aRole",
                  "description": "The role id or object."
                },
                {
                  "type": "function|nil",
                  "name": "fCallback",
                  "description": "fCallback(bSuccess)"
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Role:CreateRole": {
              "name": "MonoSuite.Role:CreateRole",
              "description": "Create a role.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sName",
                  "description": "The role name."
                },
                {
                  "type": "table",
                  "name": "tAliases",
                  "description": "Table of aliases for the role."
                },
                {
                  "type": "number",
                  "name": "iImmunity",
                  "description": "The immunity value."
                },
                {
                  "type": "string",
                  "name": "sInherits",
                  "description": "The role inherits from."
                },
                {
                  "type": "string",
                  "name": "sColor",
                  "description": "Color in hex format."
                },
                {
                  "type": "function|nil",
                  "name": "fCallback",
                  "description": "The callback with a success parameter."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Role:UpdateRole": {
              "name": "MonoSuite.Role:UpdateRole",
              "description": "Update a role.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sID",
                  "description": "The id of the role."
                },
                {
                  "type": "string|nil",
                  "name": "sName",
                  "description": "The role name."
                },
                {
                  "type": "table|nil",
                  "name": "tAliases",
                  "description": "Table of aliases for the role."
                },
                {
                  "type": "number|nil",
                  "name": "iImmunity",
                  "description": "The immunity value."
                },
                {
                  "type": "string|nil",
                  "name": "sInherits",
                  "description": "The role inherits from."
                },
                {
                  "type": "string|nil",
                  "name": "sColor",
                  "description": "Color in hex format."
                },
                {
                  "type": "function|nil",
                  "name": "fCallback",
                  "description": "The callback with a success parameter."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Role:DeleteRole": {
              "name": "MonoSuite.Role:DeleteRole",
              "description": "Delete a role.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sID",
                  "description": "The id of the role."
                },
                {
                  "type": "function|nil",
                  "name": "fCallback",
                  "description": "The callback with a success parameter."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Role:RolePlayerEvent": {
              "name": "MonoSuite.Role:RolePlayerEvent",
              "description": "Perform roles update from ModerationEvent.",
              "parameters": [
                {
                  "type": "table",
                  "name": "tData",
                  "description": "The ModerationEvent data."
                }
              ],
              "realm": "server",
              "internal": true,
              "item": "function"
            }
          },
          "item": "category",
          "description": "The role module for MonoSuite."
        },
        "MonoSuite.ServerNet": {
          "name": "MonoSuite.ServerNet",
          "pageType": "function",
          "subcategories": {
            "MonoSuite.ServerNet:Send": {
              "name": "MonoSuite.ServerNet:Send",
              "description": "Send data through ServerNet.",
              "parameters": [
                {
                  "type": "table",
                  "name": "tData",
                  "description": "The data you wish to send."
                },
                {
                  "type": "function|nil",
                  "name": "fCallback",
                  "description": "The callback function with a success parameter."
                }
              ],
              "realm": "server",
              "item": "function"
            }
          },
          "item": "category",
          "description": "ServerNet is a mean to send data to other game servers in the server group.\n\nIdentifying the data is your responsability."
        },
        "MonoSuite.UI": {
          "name": "MonoSuite.UI",
          "pageType": "function",
          "subcategories": {
            "MonoSuite.UI:OpenInspectUser": {
              "name": "MonoSuite.UI:OpenInspectUser",
              "description": "Open the player inspect page on uTarget.",
              "parameters": [
                {
                  "type": "MnsUser",
                  "name": "uTarget",
                  "description": "The target that shall be inspected."
                },
                {
                  "type": "string|nil",
                  "name": "sTab",
                  "description": "The tab to open in the inspect page (optional)."
                },
                {
                  "type": "any|nil",
                  "name": "aExtra",
                  "description": "Extra data to pass to the inspect tab (optional)."
                }
              ],
              "realm": "client",
              "item": "function"
            },
            "MonoSuite.UI:Open": {
              "name": "MonoSuite.UI:Open",
              "description": "Open the MonoSuite UI for uCaller.",
              "parameters": [
                {
                  "type": "MnsUser",
                  "name": "uCaller",
                  "description": "The caller where the UI shall open."
                },
                {
                  "type": "string|nil",
                  "name": "sTab",
                  "description": "The main tab to open (optional)."
                },
                {
                  "type": "any|nil",
                  "name": "aExtra",
                  "description": "Extra data to pass to the tab (non functional yet)."
                }
              ],
              "returns": [
                {
                  "type": "bool",
                  "description": "Returns false if uCaller is invalid."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.UI:InspectUser": {
              "name": "MonoSuite.UI:InspectUser",
              "description": "Open the player inspect page on uTarget for uCaller.",
              "parameters": [
                {
                  "type": "MnsUser",
                  "name": "uCaller",
                  "description": "The caller where the UI shall open."
                },
                {
                  "type": "MnsUser",
                  "name": "uTarget",
                  "description": "The target that shall be inspected."
                },
                {
                  "type": "string|nil",
                  "name": "sTab",
                  "description": "The tab to open in the inspect page (optional)."
                },
                {
                  "type": "any|nil",
                  "name": "aExtra",
                  "description": "Extra data to pass to the inspect tab (optional)."
                }
              ],
              "returns": [
                {
                  "type": "bool",
                  "description": "Returns false if uCaller is invalid."
                }
              ],
              "realm": "server",
              "item": "function"
            }
          },
          "item": "category",
          "description": "The MonoSuite UI module"
        }
      },
      "item": "category"
    },
    "plugins": {
      "name": "Plugins",
      "pageType": "function",
      "subcategories": {
        "MonoSuite.Administration": {
          "name": "MonoSuite.Administration",
          "pageType": "function",
          "subcategories": {
            "MonoSuite.Administration:Incognito": {
              "name": "MonoSuite.Administration:Incognito",
              "description": "Set the player given as incognito.",
              "parameters": [
                {
                  "type": "player",
                  "name": "pTarget",
                  "description": "The target."
                },
                {
                  "type": "number",
                  "name": "iExpireDelay",
                  "description": "The delay (in minutes) to remove the incognito mode"
                },
                {
                  "type": "SuiteRole|nil",
                  "name": "mRole",
                  "description": "The role object to be incognito as."
                },
                {
                  "type": "function",
                  "name": "fCallback",
                  "description": "The callback function with a success parameter."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Administration:RemoveIncognito": {
              "name": "MonoSuite.Administration:RemoveIncognito",
              "description": "Remove the player incognito mode.",
              "parameters": [
                {
                  "type": "player",
                  "name": "pTarget",
                  "description": "The target."
                },
                {
                  "type": "function|nil",
                  "name": "fCallback",
                  "description": "The callback function with a success parameter."
                }
              ],
              "realm": "server",
              "item": "function"
            }
          },
          "item": "category"
        },
        "MonoSuite.Adverts": {
          "name": "MonoSuite.Adverts",
          "pageType": "function",
          "subcategories": {
            "MonoSuite.Adverts:Fetch": {
              "name": "MonoSuite.Adverts:Fetch",
              "description": "Fetch the adverts",
              "realm": "client",
              "internal": true,
              "item": "function"
            },
            "MonoSuite.Adverts:Clear": {
              "name": "MonoSuite.Adverts:Clear",
              "description": "Clear the adverts",
              "realm": "client",
              "internal": true,
              "item": "function"
            },
            "MonoSuite.Adverts:Create": {
              "name": "MonoSuite.Adverts:Create",
              "description": "Create an advert",
              "parameters": [
                {
                  "type": "string",
                  "name": "sContent",
                  "description": "The advert's content."
                },
                {
                  "type": "Color",
                  "name": "tColour",
                  "description": "The advert's colour."
                },
                {
                  "type": "number",
                  "name": "iInterval",
                  "description": "The advert's interval in seconds."
                },
                {
                  "type": "function|nil",
                  "name": "fCallback",
                  "description": "Callback."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Adverts:Edit": {
              "name": "MonoSuite.Adverts:Edit",
              "description": "Edit an advert",
              "parameters": [
                {
                  "type": "string",
                  "name": "sUUID",
                  "description": "The advert's UUID to edit."
                },
                {
                  "type": "string|nil",
                  "name": "sContent",
                  "description": "The advert's content."
                },
                {
                  "type": "Color|nil",
                  "name": "tColour",
                  "description": "The advert's colour."
                },
                {
                  "type": "number|nil",
                  "name": "iInterval",
                  "description": "The advert's interval in seconds."
                },
                {
                  "type": "function|nil",
                  "name": "fCallback",
                  "description": "Callback."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Adverts:Delete": {
              "name": "MonoSuite.Adverts:Delete",
              "description": "Delete an advert",
              "parameters": [
                {
                  "type": "string",
                  "name": "sUUID",
                  "description": "The advert's UUID to delete."
                },
                {
                  "type": "function|nil",
                  "name": "fCallback",
                  "description": "Callback."
                }
              ],
              "realm": "server",
              "item": "function"
            }
          },
          "item": "category"
        },
        "MonoSuite.Discord": {
          "name": "MonoSuite.Discord",
          "pageType": "function",
          "subcategories": {
            "MonoSuite.Discord:AdminMessage": {
              "name": "MonoSuite.Discord:AdminMessage",
              "description": "Sends a message to the API to be distributed to Discord.",
              "parameters": [
                {
                  "type": "Player",
                  "name": "pCaller",
                  "description": "This is the player who sent the message."
                },
                {
                  "type": "string",
                  "name": "sMessage",
                  "description": "This is the message content."
                }
              ],
              "realm": "server",
              "item": "function"
            }
          },
          "item": "category",
          "description": "The Discord plugin for MonoSuite"
        },
        "MonoSuite.Duty": {
          "name": "MonoSuite.Duty",
          "pageType": "function",
          "subcategories": {
            "MonoSuite.Duty:IsOnDuty": {
              "name": "MonoSuite.Duty:IsOnDuty",
              "returns": [
                {
                  "type": "boolean|nil",
                  "description": "false if the player is off duty"
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Duty:SetOnDuty": {
              "name": "MonoSuite.Duty:SetOnDuty",
              "description": "Set a player on duty which remove incognito and reenable the noclip shortcut and physgun capabilities.",
              "parameters": [
                {
                  "type": "player",
                  "name": "pPlayer",
                  "description": "The player to set on duty"
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Duty:SetOffDuty": {
              "name": "MonoSuite.Duty:SetOffDuty",
              "description": "Set a player off duty which sets them incognito and disables the noclip shortcut and physgun capabilities.",
              "parameters": [
                {
                  "type": "player",
                  "name": "pPlayer",
                  "description": "The player to set off duty"
                }
              ],
              "realm": "server",
              "item": "function"
            }
          },
          "item": "category"
        },
        "MonoSuite.HUD": {
          "name": "MonoSuite.HUD",
          "pageType": "function",
          "subcategories": {
            "MonoSuite.HUD:AdminESP": {
              "name": "MonoSuite.HUD:AdminESP",
              "description": "Handles the `HUDPaint` hook event and draws the admin ESP HUD, if it is\nenabled.",
              "realm": "client",
              "item": "function"
            },
            "MonoSuite.HUD:AdminESP3D": {
              "name": "MonoSuite.HUD:AdminESP3D",
              "description": "Handles the `PostDrawTranslucentRenderables` hook event and draws the 3D\nadmin ESP HUD, if it is enabled.",
              "realm": "client",
              "item": "function"
            },
            "MonoSuite.HUD:ESP_Think": {
              "name": "MonoSuite.HUD:ESP_Think",
              "description": "Handles the `Tick` hook event for the admin ESP HUD, if it is enabled.",
              "realm": "client",
              "item": "function"
            },
            "MonoSuite.HUD.DrawText": {
              "name": "MonoSuite.HUD.DrawText",
              "description": "Draws the given text at the given screen position, a optional offset for the\nx and y value can be provided, by default it will be 0. The lines given\nshould be in a sequential list, each entry containing a `text` and optional\n`color` field. Each line will be drawn in a new line.",
              "parameters": [
                {
                  "type": "table",
                  "name": "tScreenPosition",
                  "description": "The screen position containing `x` and `y`."
                },
                {
                  "type": "table",
                  "name": "tLines",
                  "description": "A sequential tables with lines to draw, containing the `text` and optional `color` field."
                },
                {
                  "type": "iOffsetX",
                  "name": "The",
                  "description": "offset for the screen x position."
                },
                {
                  "type": "iOffsetY",
                  "name": "The",
                  "description": "offset for the screen y position."
                }
              ],
              "realm": "client",
              "item": "function"
            }
          },
          "item": "category"
        },
        "MonoSuite.Metrics": {
          "name": "MonoSuite.Metrics",
          "pageType": "function",
          "subcategories": {
            "MonoSuite.Metrics:_AddToQueue": {
              "name": "MonoSuite.Metrics:_AddToQueue",
              "description": "Add a metric to the queue, these will get sent to the API",
              "parameters": [
                {
                  "type": "table",
                  "name": "tMeasurement",
                  "description": "Metrics table"
                }
              ],
              "realm": "server",
              "internal": true,
              "item": "function"
            },
            "MonoSuite.Metrics:TicketClaimed": {
              "name": "MonoSuite.Metrics:TicketClaimed",
              "description": "Report a claimed ticket",
              "parameters": [
                {
                  "type": "TICKET",
                  "name": "mTicket",
                  "description": "The ticket that has been claimed"
                },
                {
                  "type": "MnsUser",
                  "name": "uStaff",
                  "description": "The staff who claimed the ticket"
                }
              ],
              "realm": "server",
              "internal": true,
              "item": "function"
            },
            "MonoSuite.Metrics:TicketDealtWith": {
              "name": "MonoSuite.Metrics:TicketDealtWith",
              "description": "Report the timestamps of tickets that have been claimed and closed",
              "parameters": [
                {
                  "type": "TICKET",
                  "name": "mTicket",
                  "description": "The ticket that has been closed"
                }
              ],
              "realm": "server",
              "internal": true,
              "item": "function"
            },
            "MonoSuite.Metrics:TimeOnJob": {
              "name": "MonoSuite.Metrics:TimeOnJob",
              "description": "Report the time a player has spend on an RP job",
              "parameters": [
                {
                  "type": "number",
                  "name": "iCreatedAt",
                  "description": "The timestamp from when the player joined the job"
                },
                {
                  "type": "number",
                  "name": "iLeftAt",
                  "description": "The timestamp from when the player left the job"
                },
                {
                  "type": "MnsUser",
                  "name": "uUser",
                  "description": "The player as MonoSuite User"
                },
                {
                  "type": "string",
                  "name": "sJob",
                  "description": "The job name"
                }
              ],
              "realm": "server",
              "item": "function"
            }
          },
          "item": "category",
          "description": "The Metrics plugin for MonoSuite."
        },
        "MonoSuite.MOTD": {
          "name": "MonoSuite.MOTD",
          "pageType": "function",
          "subcategories": {
            "MonoSuite.MOTD:ShowMOTD": {
              "name": "MonoSuite.MOTD:ShowMOTD",
              "description": "Show the MOTD to a player.\n\nThis is automatically called when the player has loaded the MOTD plugin.\n\nThis does nothing if the MOTD configuration is entirely empty.",
              "parameters": [
                {
                  "type": "Player|table|nil",
                  "name": "pPlayer",
                  "description": "Can be one player, a table of players or nil for all players."
                }
              ],
              "returns": [
                {
                  "type": "bool",
                  "description": "`false` if the configuration is empty and nothing has been sent."
                }
              ],
              "realm": "server",
              "item": "function"
            }
          },
          "item": "category"
        },
        "MonoSuite.Notes": {
          "name": "MonoSuite.Notes",
          "pageType": "function",
          "subcategories": {
            "MonoSuite.Notes:CreateNote": {
              "name": "MonoSuite.Notes:CreateNote",
              "description": "Set the given player's note.",
              "parameters": [
                {
                  "type": "MnsUser",
                  "name": "uTarget",
                  "description": "The target."
                },
                {
                  "type": "MnsUser",
                  "name": "uCaller",
                  "description": "The caller."
                },
                {
                  "type": "string",
                  "name": "sType",
                  "description": "The note type: \"Positive\", \"Neutral\" or \"Negative\"."
                },
                {
                  "type": "string",
                  "name": "sNote",
                  "description": "The note to set."
                },
                {
                  "type": "function",
                  "name": "fCallback",
                  "description": "The callback function with a success parameter."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Notes:EditNote": {
              "name": "MonoSuite.Notes:EditNote",
              "description": "Edit the given player's note.",
              "parameters": [
                {
                  "type": "MnsUser",
                  "name": "uTarget",
                  "description": "The target."
                },
                {
                  "type": "MnsUser|nil",
                  "name": "uCaller",
                  "description": "The caller (optional)."
                },
                {
                  "type": "string",
                  "name": "sNoteID",
                  "description": "The note ID to edit."
                },
                {
                  "type": "string",
                  "name": "sType",
                  "description": "The note type: \"Positive\", \"Neutral\" or \"Negative\"."
                },
                {
                  "type": "string",
                  "name": "sNote",
                  "description": "The note to set."
                },
                {
                  "type": "function",
                  "name": "fCallback",
                  "description": "The callback function with a success parameter."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Notes:DeleteNote": {
              "name": "MonoSuite.Notes:DeleteNote",
              "description": "Delete the given player's note.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sNoteID",
                  "description": "The note ID to remove."
                },
                {
                  "type": "MnsUser|nil",
                  "name": "uTarget",
                  "description": "The target (optional)."
                },
                {
                  "type": "MnsUser|nil",
                  "name": "uCaller",
                  "description": "The caller (optional)."
                },
                {
                  "type": "function|nil",
                  "name": "fCallback",
                  "description": "The callback function with a success parameter (optional)."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Notes:GetNotes": {
              "name": "MonoSuite.Notes:GetNotes",
              "description": "Get the given player's note.",
              "parameters": [
                {
                  "type": "player",
                  "name": "pTarget",
                  "description": "The target."
                }
              ],
              "returns": [{ "type": "table", "description": "Notes table." }],
              "realm": "server",
              "item": "function"
            }
          },
          "item": "category",
          "description": "The Notes plugin for MonoSuite"
        },
        "MonoSuite.ReservedSlots": {
          "name": "MonoSuite.ReservedSlots",
          "pageType": "function",
          "subcategories": {
            "MonoSuite.ReservedSlots:CreatePermissions": {
              "name": "MonoSuite.ReservedSlots:CreatePermissions",
              "realm": "server",
              "internal": true,
              "item": "function"
            },
            "MonoSuite.ReservedSlots:CreateConVars": {
              "name": "MonoSuite.ReservedSlots:CreateConVars",
              "realm": "server",
              "internal": true,
              "item": "function"
            },
            "MonoSuite.ReservedSlots:RemoveConVars": {
              "name": "MonoSuite.ReservedSlots:RemoveConVars",
              "realm": "server",
              "internal": true,
              "item": "function"
            },
            "MonoSuite.ReservedSlots:SetupHooks": {
              "name": "MonoSuite.ReservedSlots:SetupHooks",
              "realm": "server",
              "internal": true,
              "item": "function"
            },
            "MonoSuite.ReservedSlots:RemoveHooks": {
              "name": "MonoSuite.ReservedSlots:RemoveHooks",
              "realm": "server",
              "internal": true,
              "item": "function"
            },
            "MonoSuite.ReservedSlots:Init": {
              "name": "MonoSuite.ReservedSlots:Init",
              "realm": "server",
              "internal": true,
              "item": "function"
            },
            "MonoSuite.ReservedSlots:Remove": {
              "name": "MonoSuite.ReservedSlots:Remove",
              "realm": "server",
              "internal": true,
              "item": "function"
            },
            "MonoSuite.ReservedSlots:GetSlots": {
              "name": "MonoSuite.ReservedSlots:GetSlots",
              "description": "Get the number of reserved slots.",
              "returns": [
                {
                  "type": "number",
                  "description": "The total amount of reserved slots."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.ReservedSlots:SetSlots": {
              "name": "MonoSuite.ReservedSlots:SetSlots",
              "description": "Set the number of reserved slots.",
              "parameters": [
                {
                  "type": "number",
                  "name": "iSlots",
                  "description": "The total amount of reserved slots."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.ReservedSlots:GetHideSlots": {
              "name": "MonoSuite.ReservedSlots:GetHideSlots",
              "description": "Get whether slots should be hidden.",
              "returns": [
                { "type": "boolean", "description": "Slots hidden?" }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.ReservedSlots:SetHideSlots": {
              "name": "MonoSuite.ReservedSlots:SetHideSlots",
              "description": "Set whether slots should be hidden.",
              "parameters": [
                {
                  "type": "boolean",
                  "name": "bState",
                  "description": "Hide slots?"
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.ReservedSlots:GetType": {
              "name": "MonoSuite.ReservedSlots:GetType",
              "description": "Get the current reserved slots type.",
              "returns": [
                { "type": "number", "description": "Reserved slots type." }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.ReservedSlots:SetType": {
              "name": "MonoSuite.ReservedSlots:SetType",
              "description": "Set the current reserved slots type.",
              "parameters": [
                {
                  "type": "number",
                  "name": "iType",
                  "description": "Reserved slots type."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.ReservedSlots:GetMaxAdmins": {
              "name": "MonoSuite.ReservedSlots:GetMaxAdmins",
              "description": "Get the max number of admins for the reserved slots.",
              "returns": [
                { "type": "number", "description": "Max number of admins." }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.ReservedSlots:SetMaxAdmins": {
              "name": "MonoSuite.ReservedSlots:SetMaxAdmins",
              "description": "Set the max number of admins for the reserved slots.\nOnly does anything with reserve slots type 2.",
              "parameters": [
                {
                  "type": "number",
                  "name": "iMaxAdmins",
                  "description": "Max number of admins."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.ReservedSlots:GetKickType": {
              "name": "MonoSuite.ReservedSlots:GetKickType",
              "description": "Get the kick type.\n\n0 - Highest Ping\n\n1 - Highest Connection Time\n\n2 - Random Player",
              "returns": [{ "type": "number", "description": "Kick type." }],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.ReservedSlots:SetKickType": {
              "name": "MonoSuite.ReservedSlots:SetKickType",
              "description": "Set the kick type.\n\n0 - Highest Ping\n\n1 - Highest Connection Time\n\n2 - Random Player",
              "parameters": [
                {
                  "type": "number",
                  "name": "iKickType",
                  "description": "Kick type."
                }
              ],
              "realm": "server",
              "item": "function"
            }
          },
          "item": "category"
        },
        "MonoSuite.Screengrab": {
          "name": "MonoSuite.Screengrab",
          "pageType": "function",
          "subcategories": {
            "MonoSuite.Screengrab:BlockScreengrab": {
              "name": "MonoSuite.Screengrab:BlockScreengrab",
              "description": "prevent screengrab spamming",
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Screengrab:SetCanScreengrab": {
              "name": "MonoSuite.Screengrab:SetCanScreengrab",
              "description": "Sets a field for the targeted player if they have an ongoing screengrab,\na targeted player should only be allowed to be taken one screengrab at a time",
              "realm": "server",
              "item": "function"
            }
          },
          "item": "category"
        },
        "MonoSuite.SoundSystem": {
          "name": "MonoSuite.SoundSystem",
          "pageType": "function",
          "subcategories": {
            "MonoSuite.SoundSystem:IsValid": {
              "name": "MonoSuite.SoundSystem:IsValid",
              "description": "Returns a boolean indicating whether media is valid.\n\nLoading media may be invalid.",
              "returns": [{ "type": "boolean", "description": "Media valid." }],
              "realm": "client",
              "item": "function"
            },
            "MonoSuite.SoundSystem:GetServiceBase": {
              "name": "MonoSuite.SoundSystem:GetServiceBase",
              "description": "Returns the media service type, which is one of the following: \"html\", \"bass\".\n\nDo not use as it's not implemented for some reasons and will error.",
              "returns": [
                { "type": "string|nil", "description": "Media service type." }
              ],
              "realm": "client",
              "item": "function"
            },
            "MonoSuite.SoundSystem:GetService": {
              "name": "MonoSuite.SoundSystem:GetService",
              "description": "Returns the medialib service from which this media was loaded.",
              "returns": [
                { "type": "Service|nil", "description": "medialib service." }
              ],
              "realm": "client",
              "item": "function"
            },
            "MonoSuite.SoundSystem:GetUrl": {
              "name": "MonoSuite.SoundSystem:GetUrl",
              "description": "Returns the original url that has been loaded.",
              "returns": [
                {
                  "type": "string|nil",
                  "description": "Url of the loaded media."
                }
              ],
              "realm": "client",
              "item": "function"
            },
            "MonoSuite.SoundSystem:LookupMetadata": {
              "name": "MonoSuite.SoundSystem:LookupMetadata",
              "description": "Returns metadata if it's cached.\n\nOtherwise queries service for metadata and returns nil.",
              "returns": [{ "type": "table|nil", "description": "Metadata." }],
              "realm": "client",
              "item": "function"
            },
            "MonoSuite.SoundSystem:Load": {
              "name": "MonoSuite.SoundSystem:Load",
              "description": "Guess and loads the specified media from url.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sUrl",
                  "description": "The url of the media to load."
                }
              ],
              "returns": [
                {
                  "type": "MonoSuite.SoundSystem",
                  "description": "The SoundSystem meta."
                }
              ],
              "realm": "client",
              "item": "function"
            },
            "MonoSuite.SoundSystem:Play": {
              "name": "MonoSuite.SoundSystem:Play",
              "description": "Guess, loads and play the specified media from url.",
              "parameters": [
                {
                  "type": "string|nil",
                  "name": "sUrl",
                  "description": "The url of the media to play. Leave nil to just play/resume current loaded media."
                }
              ],
              "returns": [
                {
                  "type": "MonoSuite.SoundSystem",
                  "description": "The SoundSystem meta."
                }
              ],
              "realm": "client",
              "item": "function"
            },
            "MonoSuite.SoundSystem:Pause": {
              "name": "MonoSuite.SoundSystem:Pause",
              "description": "Pause the media.",
              "returns": [
                {
                  "type": "MonoSuite.SoundSystem",
                  "description": "The SoundSystem meta."
                }
              ],
              "realm": "client",
              "item": "function"
            },
            "MonoSuite.SoundSystem:Stop": {
              "name": "MonoSuite.SoundSystem:Stop",
              "description": "Stops the media.",
              "returns": [
                {
                  "type": "MonoSuite.SoundSystem",
                  "description": "The SoundSystem meta."
                }
              ],
              "realm": "client",
              "item": "function"
            },
            "MonoSuite.SoundSystem:GetState": {
              "name": "MonoSuite.SoundSystem:GetState",
              "description": "Returns state of media, which is one of the following:\n\"error\", \"loading\", \"buffering\", \"playing\", \"paused\", \"stopped\".",
              "returns": [
                {
                  "type": "string|nil",
                  "description": "State of media. nil if media wasn't created."
                }
              ],
              "realm": "client",
              "item": "function"
            },
            "MonoSuite.SoundSystem:IsPlaying": {
              "name": "MonoSuite.SoundSystem:IsPlaying",
              "description": "Returns a boolean indicating whether media is playing.",
              "returns": [
                { "type": "boolean", "description": "Media is playing." }
              ],
              "realm": "client",
              "item": "function"
            },
            "MonoSuite.SoundSystem:GetVolume": {
              "name": "MonoSuite.SoundSystem:GetVolume",
              "description": "Returns the volume (a number in the range of 0 and 100).",
              "returns": [
                { "type": "number|nil", "description": "The volume." }
              ],
              "realm": "client",
              "item": "function"
            },
            "MonoSuite.SoundSystem:SetVolume": {
              "name": "MonoSuite.SoundSystem:SetVolume",
              "description": "Set the volume (a number in the range of 0 and 100).",
              "parameters": [
                {
                  "type": "number",
                  "name": "iVolume",
                  "description": "The volume."
                }
              ],
              "returns": [
                {
                  "type": "MonoSuite.SoundSystem",
                  "description": "The SoundSystem meta."
                }
              ],
              "realm": "client",
              "item": "function"
            },
            "MonoSuite.SoundSystem:SetQuality": {
              "name": "MonoSuite.SoundSystem:SetQuality",
              "description": "Sets the media quality.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sQuality",
                  "description": "\"low\", \"medium\", \"high\" or \"veryhigh\"."
                }
              ],
              "returns": [
                {
                  "type": "MonoSuite.SoundSystem",
                  "description": "The SoundSystem meta."
                }
              ],
              "realm": "client",
              "item": "function"
            },
            "MonoSuite.SoundSystem:GetTime": {
              "name": "MonoSuite.SoundSystem:GetTime",
              "description": "Returns the media elapsed time from track data (if available).",
              "returns": [{ "type": "number|nil", "description": "Time." }],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.SoundSystem:Seek": {
              "name": "MonoSuite.SoundSystem:Seek",
              "description": "Seeks to specified time.",
              "parameters": [
                { "type": "number", "name": "iTime", "description": "Time." }
              ],
              "returns": [
                {
                  "type": "MonoSuite.SoundSystem",
                  "description": "The SoundSystem meta."
                }
              ],
              "realm": "client",
              "item": "function"
            },
            "MonoSuite.SoundSystem:Sync": {
              "name": "MonoSuite.SoundSystem:Sync",
              "description": "Seeks to given time, if the elapsed time differs from it too much (more than iErrorMargin).",
              "parameters": [
                { "type": "number", "name": "iTime", "description": "Time." },
                {
                  "type": "number",
                  "name": "iErrorMargin",
                  "description": "Error margin (time)."
                }
              ],
              "returns": [
                {
                  "type": "MonoSuite.SoundSystem",
                  "description": "The SoundSystem meta."
                }
              ],
              "realm": "client",
              "item": "function"
            },
            "MonoSuite.SoundSystem:QueryMetadata": {
              "name": "MonoSuite.SoundSystem:QueryMetadata",
              "description": "Queries for metadata about video (eg. title and duration).",
              "parameters": [
                {
                  "type": "string",
                  "name": "sUrl",
                  "description": "The url of the media to query."
                },
                {
                  "type": "function",
                  "name": "fCallback",
                  "description": "fCallback(sError, tData, sErrorPhrase)."
                }
              ],
              "returns": [
                {
                  "type": "MonoSuite.SoundSystem",
                  "description": "The SoundSystem meta."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.SoundSystem:IsYouTubeKeySet": {
              "name": "MonoSuite.SoundSystem:IsYouTubeKeySet",
              "description": "Returns true if YouTube API key is provided.",
              "returns": [
                { "type": "boolean", "description": "Is YouTube key provided." }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.SoundSystem:GetYouTubeKey": {
              "name": "MonoSuite.SoundSystem:GetYouTubeKey",
              "description": "Returns the YouTube API key.",
              "returns": [
                { "type": "string|nil", "description": "YouTube API key." }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.SoundSystem:SetYouTubeKey": {
              "name": "MonoSuite.SoundSystem:SetYouTubeKey",
              "description": "Sets (or unsets) the YouTube API key.",
              "parameters": [
                {
                  "type": "string|nil",
                  "name": "sKey",
                  "description": "YouTube API key."
                }
              ],
              "returns": [
                {
                  "type": "MonoSuite.SoundSystem",
                  "description": "The SoundSystem meta."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.SoundSystem:IsSoundCloudKeySet": {
              "name": "MonoSuite.SoundSystem:IsSoundCloudKeySet",
              "description": "Returns true if SoundCloud API key(s) is provided.",
              "returns": [
                {
                  "type": "boolean",
                  "description": "Is SoundCloud key(s) provided."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.SoundSystem:GetSoundCloudKey": {
              "name": "MonoSuite.SoundSystem:GetSoundCloudKey",
              "description": "Returns the SoundCloud API key(s)",
              "returns": [
                {
                  "type": "string|table|nil",
                  "description": "SoundCloud API key(s)."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.SoundSystem:SetSoundCloudKey": {
              "name": "MonoSuite.SoundSystem:SetSoundCloudKey",
              "description": "Sets (or unsets) the SoundCloud API key(s).",
              "parameters": [
                {
                  "type": "string|table|nil",
                  "name": "aKey",
                  "description": "SoundCloud API key(s)."
                }
              ],
              "returns": [
                {
                  "type": "MonoSuite.SoundSystem",
                  "description": "The SoundSystem meta."
                }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.SoundSystem:SendPlay": {
              "name": "MonoSuite.SoundSystem:SendPlay",
              "description": "Sends a media to play to clients.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sUrl",
                  "description": "The url of the media to play."
                },
                {
                  "type": "number",
                  "name": "iTime",
                  "description": "Start time."
                },
                {
                  "type": "Player|nil",
                  "name": "pPlayer",
                  "description": "Player to sent the media url to."
                }
              ],
              "returns": [
                {
                  "type": "MonoSuite.SoundSystem",
                  "description": "The SoundSystem meta."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.SoundSystem:SendResume": {
              "name": "MonoSuite.SoundSystem:SendResume",
              "description": "Starts the loaded media on clients.",
              "parameters": [
                {
                  "type": "Player|nil",
                  "name": "pPlayer",
                  "description": "Player to sent the media resume to."
                }
              ],
              "returns": [
                {
                  "type": "MonoSuite.SoundSystem",
                  "description": "The SoundSystem meta."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.SoundSystem:SendPause": {
              "name": "MonoSuite.SoundSystem:SendPause",
              "description": "Pause the loaded media on clients.",
              "parameters": [
                {
                  "type": "Player|nil",
                  "name": "pPlayer",
                  "description": "Player to sent the media pause to."
                }
              ],
              "returns": [
                {
                  "type": "MonoSuite.SoundSystem",
                  "description": "The SoundSystem meta."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.SoundSystem:SendStop": {
              "name": "MonoSuite.SoundSystem:SendStop",
              "description": "Stops the loaded media on clients.",
              "parameters": [
                {
                  "type": "Player|nil",
                  "name": "pPlayer",
                  "description": "Player to sent the media stop to."
                }
              ],
              "returns": [
                {
                  "type": "MonoSuite.SoundSystem",
                  "description": "The SoundSystem meta."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.SoundSystem:SendSetVolume": {
              "name": "MonoSuite.SoundSystem:SendSetVolume",
              "description": "Sets the media volume on clients (a number in the range of 0 and 100).",
              "parameters": [
                {
                  "type": "number",
                  "name": "iVolume",
                  "description": "The volume."
                },
                {
                  "type": "Player|nil",
                  "name": "pPlayer",
                  "description": "Player to sent the media volume to."
                }
              ],
              "returns": [
                {
                  "type": "MonoSuite.SoundSystem",
                  "description": "The SoundSystem meta."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.SoundSystem:SendSeek": {
              "name": "MonoSuite.SoundSystem:SendSeek",
              "description": "Seeks the media to specified time on clients.",
              "parameters": [
                { "type": "number", "name": "iTime", "description": "Time." },
                {
                  "type": "Player|nil",
                  "name": "pPlayer",
                  "description": "Player to sent the media seek to."
                }
              ],
              "returns": [
                {
                  "type": "MonoSuite.SoundSystem",
                  "description": "The SoundSystem meta."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.SoundSystem:SendYouTubeKey": {
              "name": "MonoSuite.SoundSystem:SendYouTubeKey",
              "description": "Send the YouTube API key to a player or broadcast.",
              "parameters": [
                {
                  "type": "Player|nil",
                  "name": "pPlayer",
                  "description": "Player to sent the API key to."
                }
              ],
              "returns": [
                {
                  "type": "MonoSuite.SoundSystem",
                  "description": "The SoundSystem meta."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.SoundSystem:SendSoundCloudKey": {
              "name": "MonoSuite.SoundSystem:SendSoundCloudKey",
              "description": "Send the SoundCloud API key(s) to a player or broadcast.",
              "parameters": [
                {
                  "type": "Player|nil",
                  "name": "pPlayer",
                  "description": "Player to sent the API key to."
                }
              ],
              "returns": [
                {
                  "type": "MonoSuite.SoundSystem",
                  "description": "The SoundSystem meta."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.SoundSystem:KeepTrack": {
              "name": "MonoSuite.SoundSystem:KeepTrack",
              "description": "Attempt to keep track of the media elapsed time and duration.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sUrl",
                  "description": "The url of the media to play."
                },
                {
                  "type": "number",
                  "name": "iStartTime",
                  "description": "Start time."
                },
                {
                  "type": "table",
                  "name": "tData",
                  "description": "Media metadata."
                }
              ],
              "returns": [
                {
                  "type": "MonoSuite.SoundSystem",
                  "description": "The SoundSystem meta."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.SoundSystem:SeekTrack": {
              "name": "MonoSuite.SoundSystem:SeekTrack",
              "description": "Seek tracking info of the media.",
              "parameters": [
                {
                  "type": "number",
                  "name": "iStartTime",
                  "description": "Start time."
                }
              ],
              "returns": [
                {
                  "type": "MonoSuite.SoundSystem",
                  "description": "The SoundSystem meta."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.SoundSystem:PauseTrack": {
              "name": "MonoSuite.SoundSystem:PauseTrack",
              "description": "Pause tracking info of the media.",
              "returns": [
                {
                  "type": "MonoSuite.SoundSystem",
                  "description": "The SoundSystem meta."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.SoundSystem:ResumeTrack": {
              "name": "MonoSuite.SoundSystem:ResumeTrack",
              "description": "Resume tracking info of the media.",
              "returns": [
                {
                  "type": "MonoSuite.SoundSystem",
                  "description": "The SoundSystem meta."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.SoundSystem:ResetTrack": {
              "name": "MonoSuite.SoundSystem:ResetTrack",
              "description": "Empty the media tracking info.",
              "returns": [
                {
                  "type": "MonoSuite.SoundSystem",
                  "description": "The SoundSystem meta."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.SoundSystem:IsValidPlaying": {
              "name": "MonoSuite.SoundSystem:IsValidPlaying",
              "description": "Returns true if the media should be playing.\n\nReturns false if the media shouldn't be playing (paused/ended).\n\nReturns nil if unknown or that no media should be playing.",
              "returns": [
                { "type": "boolean|nil", "description": "true/false/nil." }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.SoundSystem:AutoPlay": {
              "name": "MonoSuite.SoundSystem:AutoPlay",
              "description": "Auto plays the media that should currently be playing to a player.",
              "parameters": [
                {
                  "type": "Player|nil",
                  "name": "pPlayer",
                  "description": "Player that should be playing the media."
                }
              ],
              "returns": [
                {
                  "type": "MonoSuite.SoundSystem",
                  "description": "The SoundSystem meta."
                }
              ],
              "realm": "server",
              "item": "function"
            }
          },
          "item": "category",
          "description": "SoundSystem allows for a large variety of external media to be played.\n\nIt uses the gmod-medialib."
        },
        "MonoSuite.Spectate": {
          "name": "MonoSuite.Spectate",
          "pageType": "function",
          "subcategories": {
            "MonoSuite.Spectate:IsSpectating": {
              "name": "MonoSuite.Spectate:IsSpectating",
              "description": "Get whether the local player is spectating.",
              "returns": [{ "type": "bool", "description": "Spectating" }],
              "realm": "client",
              "item": "function"
            },
            "MonoSuite.Spectate:IsRoaming": {
              "name": "MonoSuite.Spectate:IsRoaming",
              "description": "Get whether the local player is roaming an entity.",
              "returns": [{ "type": "bool", "description": "FreeRoam" }],
              "realm": "client",
              "item": "function"
            },
            "MonoSuite.Spectate:SpecEnt": {
              "name": "MonoSuite.Spectate:SpecEnt",
              "description": "Return the entity that is being spectated (not accurate).\nSame as MonoSuite.Spectate:SpectatedEnt() but without built-in logic checks.",
              "returns": [
                {
                  "type": "Entity|nil",
                  "description": "Entity being spectated"
                }
              ],
              "realm": "client",
              "item": "function"
            },
            "MonoSuite.Spectate:SpectatedEnt": {
              "name": "MonoSuite.Spectate:SpectatedEnt",
              "description": "Return the entity that is being spectated (accurate).\nSame as MonoSuite.Spectate:SpecEnt() but with built-in logic checks.",
              "returns": [
                {
                  "type": "Entity|nil",
                  "description": "Entity being spectated"
                }
              ],
              "realm": "client",
              "item": "function"
            },
            "MonoSuite.Spectate:FindNearestObject": {
              "name": "MonoSuite.Spectate:FindNearestObject",
              "description": "Find the right player to spectate.\nReturns the Entity on the crosshair or the nearest Player.",
              "returns": [
                { "type": "Entity|nil", "description": "Best match" }
              ],
              "realm": "client",
              "item": "function"
            }
          },
          "item": "category"
        },
        "MonoSuite.Tickets": {
          "name": "MonoSuite.Tickets",
          "pageType": "function",
          "subcategories": {},
          "item": "category",
          "description": "The Tickets plugin for MonoSuite.\nTODO: documentation"
        },
        "MonoSuite.Warnings": {
          "name": "MonoSuite.Warnings",
          "pageType": "function",
          "subcategories": {
            "MonoSuite.Warnings:Warn": {
              "name": "MonoSuite.Warnings:Warn",
              "description": "Warn the given user.",
              "parameters": [
                {
                  "type": "MnsUser",
                  "name": "uCaller",
                  "description": "The warn issuer."
                },
                {
                  "type": "MnsUser",
                  "name": "uTarget",
                  "description": "The target."
                },
                {
                  "type": "number",
                  "name": "iPoints",
                  "description": "The amount of warn points."
                },
                {
                  "type": "string",
                  "name": "sReason",
                  "description": "The reason."
                },
                {
                  "type": "function|nil",
                  "name": "fCallback",
                  "description": "The callback function with a success parameter."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Warnings:UpdateWarn": {
              "name": "MonoSuite.Warnings:UpdateWarn",
              "description": "Update the given warn.",
              "parameters": [
                {
                  "type": "MnsUser",
                  "name": "uCaller",
                  "description": "The warn issuer."
                },
                {
                  "type": "MnsUser",
                  "name": "uTarget",
                  "description": "The target."
                },
                {
                  "type": "string",
                  "name": "sWarnID",
                  "description": "The warn ID."
                },
                {
                  "type": "string",
                  "name": "sReason",
                  "description": "The reason."
                },
                {
                  "type": "function|nil",
                  "name": "fCallback",
                  "description": "The callback function with a success parameter."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Warnings:UnWarn": {
              "name": "MonoSuite.Warnings:UnWarn",
              "description": "Remove a warn from the given user.",
              "parameters": [
                {
                  "type": "MnsUser",
                  "name": "uCaller",
                  "description": "The warn issuer."
                },
                {
                  "type": "MnsUser",
                  "name": "uTarget",
                  "description": "The target."
                },
                {
                  "type": "string",
                  "name": "sWarnID",
                  "description": "The warn ID."
                },
                {
                  "type": "function|nil",
                  "name": "fCallback",
                  "description": "The callback function with a success parameter."
                }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Warnings:Get": {
              "name": "MonoSuite.Warnings:Get",
              "description": "Get warning data of given user.",
              "parameters": [
                {
                  "type": "MnsUser",
                  "name": "uTarget",
                  "description": "User to get the warnings from."
                },
                {
                  "type": "function|nil",
                  "name": "fCallback",
                  "description": "The callback function with a data parameter."
                }
              ],
              "realm": "server",
              "item": "function"
            }
          },
          "item": "category"
        },
        "MonoSuite.Warps": {
          "name": "MonoSuite.Warps",
          "pageType": "function",
          "subcategories": {
            "MonoSuite.Warps:GetWarps": {
              "name": "MonoSuite.Warps:GetWarps",
              "description": "Returns warps data.",
              "returns": [
                { "type": "table|nil", "description": "Warps table." }
              ],
              "realm": "shared",
              "item": "function"
            },
            "MonoSuite.Warps:Warp": {
              "name": "MonoSuite.Warps:Warp",
              "description": "Teleport to warp",
              "parameters": [
                {
                  "type": "player",
                  "name": "pCaller",
                  "description": "The command caller."
                },
                {
                  "type": "string",
                  "name": "sName",
                  "description": "The name of the warp."
                },
                {
                  "type": "player",
                  "name": "pTarget",
                  "description": "Target to teleport."
                },
                {
                  "type": "function|nil",
                  "name": "fCallback",
                  "description": "Callback function."
                },
                {
                  "type": "function|nil",
                  "name": "fReject",
                  "description": "Failure callback function."
                }
              ],
              "returns": [
                { "type": "MonoSuite.Warps", "description": "The Warps meta." }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Warps:SetWarp": {
              "name": "MonoSuite.Warps:SetWarp",
              "description": "Create a new warp.",
              "parameters": [
                {
                  "type": "player",
                  "name": "pCaller",
                  "description": "Player to get Vector and Angle data from."
                },
                {
                  "type": "string",
                  "name": "sName",
                  "description": "The name of the warp."
                },
                {
                  "type": "function|nil",
                  "name": "fCallback",
                  "description": "Callback function."
                },
                {
                  "type": "function|nil",
                  "name": "fReject",
                  "description": "Failure callback function."
                }
              ],
              "returns": [
                { "type": "MonoSuite.Warps", "description": "The Warps meta." }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Warps:DeleteWarp": {
              "name": "MonoSuite.Warps:DeleteWarp",
              "description": "Delete a warp.",
              "parameters": [
                {
                  "type": "string",
                  "name": "sName",
                  "description": "The name of the warp."
                },
                {
                  "type": "function|nil",
                  "name": "fCallback",
                  "description": "Callback function."
                },
                {
                  "type": "function|nil",
                  "name": "fReject",
                  "description": "Failure callback function."
                }
              ],
              "returns": [
                { "type": "MonoSuite.Warps", "description": "The Warps meta." }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Warps:FetchWarps": {
              "name": "MonoSuite.Warps:FetchWarps",
              "description": "Fetch all warps data from the API.",
              "parameters": [
                {
                  "type": "function|nil",
                  "name": "fCallback",
                  "description": "Callback function."
                },
                {
                  "type": "function|nil",
                  "name": "fFailure",
                  "description": "Failure callback function."
                }
              ],
              "returns": [
                { "type": "MonoSuite.Warps", "description": "The Warps meta." }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Warps:SendToPlayers": {
              "name": "MonoSuite.Warps:SendToPlayers",
              "description": "Send warp data to authorized players.",
              "returns": [
                { "type": "MonoSuite.Warps", "description": "The Warps meta." }
              ],
              "realm": "server",
              "item": "function"
            },
            "MonoSuite.Warps:SendToPlayer": {
              "name": "MonoSuite.Warps:SendToPlayer",
              "description": "Send warp data to a specified player.",
              "parameters": [
                {
                  "type": "Player|table|nil",
                  "name": "pPlayer",
                  "description": "Player(s) to send the warps data to."
                }
              ],
              "returns": [
                { "type": "MonoSuite.Warps", "description": "The Warps meta." }
              ],
              "realm": "server",
              "item": "function"
            }
          },
          "item": "category"
        }
      },
      "item": "category"
    }
  },
  "title": "MonoSuite Documentation",
  "icons": { "Modules": "mdiViewModule", "Plugins": "mdiPowerPlug" }
}
